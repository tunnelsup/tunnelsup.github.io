<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webdev | TunnelsUP]]></title>
  <link href="http://tunnelsup.github.io/tup/tag/webdev/atom.xml" rel="self"/>
  <link href="http://tunnelsup.github.io/"/>
  <updated>2016-09-29T22:41:01-07:00</updated>
  <id>http://tunnelsup.github.io/</id>
  <author>
    <name><![CDATA[Jack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to do a Javascript Redirect]]></title>
    <link href="http://tunnelsup.github.io/how-to-do-a-javascript-redirect/"/>
    <updated>2015-07-23T22:33:00-07:00</updated>
    <id>http://tunnelsup.github.io/how-to-do-a-javascript-redirect</id>
    <content type="html"><![CDATA[<p>The best way to do a Javascript redirect is with the following code:</p>

<p>```javascript</p>

<script type="text/javascript">
    window.location.href = "http://example.com";
</script>


<p>```</p>

<p>The Javascript variable <code>window.location.href</code> contains the full URL of the current page. By setting this to something else, the browser immediately is redirected to that page. We can also view the URL of the current page by printing the contents of <code>window.location.href</code>. For example, the contents of that variable on this page is:</p>

<script language="javascript">
    document.write (document.location.href);
</script>




<br>


<br>


<p>It&rsquo;s possible to just use <code>window.location</code> or even shorter <code>location</code> instead of <code>window.location.href</code> to set the location. However, these are two different variables when reading them. The variable <code>window.location</code> is an object and has multiple values, while the variable <code>window.location.href</code> is a string and contains the URL. So it&rsquo;s better practice to use the <code>window.location.href</code> here because it works for both setting and reading the URL location which makes reading code easier too.</p>

<h3>Example HTML</h3>

<p>Here is an example webpage that will immediately redirect the browser to another location.</p>

<p>```html
<html>
<head></p>

<script type="text/javascript">
    window.location.href = "http://example.com";
</script>


<p></head>
<body>
Javascript Redirect Example
</body>
</html>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Checkbox Checked - Reading and Setting]]></title>
    <link href="http://tunnelsup.github.io/jquery-checkbox-checked-reading-and-setting/"/>
    <updated>2015-01-16T09:45:00-08:00</updated>
    <id>http://tunnelsup.github.io/jquery-checkbox-checked-reading-and-setting</id>
    <content type="html"><![CDATA[<p>If you have a checkbox in a form you can use jQuery to read and set the data in the checkbox. Here is the HTML we&rsquo;ll use an example for our checkbox:</p>

<p><code>html
&lt;input type="checkbox" id="checkboxid" /&gt;
</code></p>

<h2>Reading a Checkbox</h2>

<p>When using jQuery and you wish to read whether a checkbox is checked or not.</p>

<p><code>javascript
$('#checkboxid').is(':checked');
</code></p>

<p>This will return <code>true</code> if the checkbox is checked and <code>false</code> if left unchecked.</p>

<h2>Checking or Unchecking the Checkbox</h2>

<p>Use the <a href="http://api.jquery.com/prop/">.prop()</a> function to manipulate the checkbox.</p>

<p><code>javascript
$("#checkboxid").prop('checked', true);  // Checks the box
$("#checkboxid").prop('checked', false); // Unchecks the box
</code></p>

<p>The attr() function of jQuery has been deprecated since 1.6. However if you&rsquo;re jQuery version is below 1.6 you must use this method.</p>

<p><code>javascript
$("#checkboxid").attr('checked', true);
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Google Analytics data from Meteor.js server side]]></title>
    <link href="http://tunnelsup.github.io/sending-google-analytics-data-from-meteor-dot-js-server-side/"/>
    <updated>2015-01-01T15:50:00-08:00</updated>
    <id>http://tunnelsup.github.io/sending-google-analytics-data-from-meteor-dot-js-server-side</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve created a website that responds with HTML and also has an API that responds with JSON data. The website was create in Meteor.js and I wanted to integrate it into Google Analytics. Having it send Google Analytics statistics on the client side was easy and straight forward. However when it came time to send statistics to Google Analytics from the Meteor.js server side of the application I had to spend quite a bit of time finding an answer.</p>

<h2>Use the Google Analytics Measurements Protocol</h2>

<p>Check out the Google Developers section on Google Analytics regarding the Measurements Protocol.</p>

<p><a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide#page">https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide#page</a></p>

<h2>Use the Meteor HTTP.call() function</h2>

<p><a href="http://docs.meteor.com/#/full/http_call">http://docs.meteor.com/#/full/http_call</a></p>

<p>Don&rsquo;t forget, as of Meteor 1.2 this isn&rsquo;t on by default. It needs to be added by doing the following from the command prompt:</p>

<p><code>meteor add http</code></p>

<h2>Putting it all together</h2>

<p>Here are the results of my code in order to trigger a page view every time the user visits the /api route of my web app.</p>

<p>```javascript
if (Meteor.isServer) {
  Meteor.startup(function () {</p>

<pre><code>Router.map(function() {
    this.route('methodExample', {
        path: '/api',
        where: 'server',
        action: function() {

            // Send Google Analytics
            HTTP.call("POST", "https://www.google-analytics.com/collect?",
                       {params: {
                          'v': '1',
                          'tid': 'UA-XXXXXX-Y',
                          'cid': '555',
                          't': 'pageview',
                          'dp': 'api'
                        }}
            );
        }
    });
});
</code></pre>

<p>  });
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canonical and DNS settings for www, non-www, and https for Heroku and Cloudflare]]></title>
    <link href="http://tunnelsup.github.io/canonical-settings-and-dns-for-www-and-non-www-urls/"/>
    <updated>2014-12-27T23:29:00-08:00</updated>
    <id>http://tunnelsup.github.io/canonical-settings-and-dns-for-www-and-non-www-urls</id>
    <content type="html"><![CDATA[<p>When deploying a web application it&rsquo;s important that the URL responds to both www and non-www as well as both http and https. However it&rsquo;s also very important that only one of those is the absolute and correct one and the server forces users to only use one.</p>

<p>I like to use cloudflare for my DNS configurations and Heroku for my web server. These techniques can be used on any programming language such as Ruby on Rails, PHP, Meteor.js, or Django. They can also be used on any web server such as Apache, nginx, node.js. It doesn&rsquo;t require any .htaccess rules either, only the clever use of Heroku, Cloudflare, and HTML.</p>

<h2>Setting canonical</h2>

<p>It&rsquo;s important to tell search engines and bots which version of your URL is the absolute and correct version. This way search engines will be pointing to the correct URL and browsers will understand which one to use too. This is important for SEO and analytics. For SEO, search engines will see both www and non-www sites as two separate sites and giving each it&rsquo;s own search rankings. You want to make sure that you are clumping all of your users into a single authoritative URL so the search engines can see just how popular your domain is. This authoritative URL is known as the canonical URL.</p>

<p>To set the canonical URL simply add this HTML code in the head of every page on your site.</p>

<p><code>
&lt;head&gt;
  &lt;link rel="canonical" href="https://example.com" /&gt;
&lt;/head&gt;
</code></p>

<p>Of course every page has a unique canonical URL. If you have a webpage located at <code>https://example.com/about.html</code> then your canonical URL will have the <code>about.html</code> in it.</p>

<h2>Responding to everything</h2>

<p>You want your website to listen to and respond to all of the following versions of your URL.</p>

<ul>
<li><a href="http://example.com">http://example.com</a></li>
<li><a href="http://www.example.com">http://www.example.com</a></li>
<li><a href="https://example.com">https://example.com</a></li>
<li><a href="https://www.example.com">https://www.example.com</a></li>
</ul>


<p>This is important because people will be trying every one of these combinations when going to your site. Whenever I hear or see a URL I never pay attention of whether it has www or no www before it. I simply type the name_of_url.com into my browser and go. Way too often the website hasn&rsquo;t set up DNS correctly and I get page not found and I just think the page doesn&rsquo;t exist anymore and go away. This is a grave error on the webmaster to simply ignore this problem.</p>

<h3>Setting up Heroku</h3>

<p>First let&rsquo;s set up Heroku.</p>

<ol>
<li>Go to the <code>settings</code> page on your application</li>
<li>Go to the <code>domains</code> section and add the domain you wish to be your primary one. In our case we are choosing example.com</li>
</ol>


<h3>Setting up Cloudflare</h3>

<h5>DNS Settings</h5>

<p>For setting up Heroku and Cloudflare simply do the following DNS settings:</p>

<p><code>
CNAME - example.com - is an alias of example.herokuapp.com
CNAME - * - is an alias of example.herokuapp.com
CNAME - www - is an alias of example.herokuapp.com
</code></p>

<h4>Forwarding settings</h4>

<p>Now we need to set a <a href="https://support.cloudflare.com/hc/en-us/articles/200172286-How-do-I-do-url-forwarding-with-CloudFlare-">forwarding rule in Cloudflare</a>.</p>

<ol>
<li>Go to the gear icon to open your <code>settings</code>.</li>
<li>Go to the <code>Page Rule's</code> option</li>
<li>Click <code>Forwarding</code> <code>ON</code>.</li>
<li>In the <code>URL pattern</code> box, type <code>www.example.com/*</code></li>
<li>In the <code>forwarding destination URL</code> box, type <code>https://example.com</code></li>
<li>Choose <code>forwarding type</code> <code>301 - permanent</code></li>
</ol>


<p>If you don&rsquo;t wish to or can&rsquo;t use https then you can just choose http here instead.</p>

<p>If you do wish to use https then I also recommending setting <code>always use https</code> in the page rules also.</p>

<h2>Responding to HTTPS</h2>

<p>There is a really cool trick to getting free https when using both free Cloudflare and free Heroku plans. Your Heroku app should already be responding to <a href="https://example.heroku.com.">https://example.heroku.com.</a> It has a it&rsquo;s own official HTTPS certificate that you can use if you use their domain name. Cloudflare has an option called Full SSL which is part of the free plan. This setting will allow HTTPS connections to Cloudflare, then do a HTTPS connection to the hosting domain. Essentially it&rsquo;s end to end HTTPS all for free.</p>

<h4>Setting up Full SSL in Cloudflare</h4>

<p>Access your Cloudflare account and do the following:</p>

<ol>
<li>Go to the gear and choose <code>Cloudflare settings</code>.</li>
<li>Scroll down to <code>SSL</code> and choose <code>Full SSL</code>.</li>
</ol>


<p>Cloudflare is updated upon changing this setting.</p>

<h2>Conclusion</h2>

<p>Now your website should be responding to each of the following variations of your site:</p>

<ul>
<li><a href="http://www.example.com">http://www.example.com</a></li>
<li><a href="http://example.com">http://example.com</a></li>
<li><a href="https://www.example.com">https://www.example.com</a></li>
<li><a href="https://example.com">https://example.com</a></li>
</ul>


<p>However, the first three variations should all be forwarding to <code>https://example.com</code>. This is done using the Cloudflare forwarding rules we set.</p>

<p>Lastly, search engines and browsers will understand your canonical settings you have defined and only be using that version of your URL as the authoritative URL to use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Meteor 1.0 to Heroku]]></title>
    <link href="http://tunnelsup.github.io/deploying-meteor-1-dot-0-to-heroku/"/>
    <updated>2014-12-24T18:44:00-08:00</updated>
    <id>http://tunnelsup.github.io/deploying-meteor-1-dot-0-to-heroku</id>
    <content type="html"><![CDATA[<p>Heroku doesn&rsquo;t have an official document as of yet for deploying a <a href="http://meteor.com">meteor</a> application on their platform. However meteor does just use node.js under the hood, so a specailly crafted buildpack can actually make it run there&hellip; for the most part.</p>

<h3>Meteor BuildPack Horse</h3>

<p><a href="https://github.com/AdmitHub/meteor-buildpack-horse">https://github.com/AdmitHub/meteor-buildpack-horse</a></p>

<p>This buildpack worked for the most part.</p>

<p>First start by checking your application into git with the basic following:</p>

<p><code>
git init
git add .
git commit -m 'Initial commit'
</code></p>

<p>Then create the heroku app with this command:</p>

<p><code>
heroku create --stack cedar --buildpack https://github.com/AdmitHub/meteor-buildpack-horse.git
</code></p>

<p>Now create a remote for Heroku doing this:</p>

<p><code>
heroku git:remote -a &lt;name of heroku app&gt;
</code></p>

<p>Next you need to push the application by doing a git push:</p>

<p><code>
git push heroku master
</code></p>

<p>Now you need to set the ROOT_URL by doing this</p>

<p><code>
heroku config:add ROOT_URL=https://&lt;name of app&gt;.herokuapp.com
</code></p>

<p>Now you should be able to navigate to your URL and it should work.</p>

<p>This actually auto set me up for a free MongoLab account on Heroku and my database was up and running with 0 configuration. Wow!</p>

<h3>Meteorite Build Pack</h3>

<p>Found here: <a href="https://github.com/oortcloud/heroku-buildpack-meteorite">https://github.com/oortcloud/heroku-buildpack-meteorite</a></p>

<p>This one I couldn&rsquo;t get to work with version 1.0.2.1. I would get errors after deploying to heroku that something went wrong with the application.</p>
]]></content>
  </entry>
  
</feed>
