<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tunnel | TunnelsUP]]></title>
  <link href="https://www.tunnelsup.com/tup/tag/tunnel/atom.xml" rel="self"/>
  <link href="https://www.tunnelsup.com/"/>
  <updated>2017-08-10T10:10:07-07:00</updated>
  <id>https://www.tunnelsup.com/</id>
  <author>
    <name><![CDATA[Jack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Create SSH Tunnels]]></title>
    <link href="https://www.tunnelsup.com/how-to-create-ssh-tunnels/"/>
    <updated>2016-10-09T16:38:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-create-ssh-tunnels</id>
    <content type="html"><![CDATA[<p>Besides sending ssh data, the ssh protocol can tunnel other traffic between two hosts. The most common tunnels are remote and local. Knowing how to spin up an ssh tunnel can help you reach otherwise inaccessible networks and systems.</p>

<p>These examples work from a linux prompt or a macOS terminal. It&rsquo;s possible to do the same thing in Windows using applications like putty or mobaXterm.</p>

<h2>Local ssh Port Forwarding</h2>

<p>You can use a local ssh tunnel when you want to get to a resource that you can&rsquo;t get to directly, but a ssh server that you have access to can. Here are some scenarios.</p>

<h4>Proxy to Remote Server</h4>

<p><img src="/images/ssh-local2.png">
In the image above, the blue host cannot reach <code>http://192.168.0.3</code> but can ssh to 192.168.0.2. The following ssh command executed on the <strong>blue host</strong> will allow the blue host to reach the red host.</p>

<p><code>
ssh -L 8080:192.168.0.3:80 reduser@192.168.0.2
</code></p>

<p>Now the blue host can open a browser, and go to <code>http://localhost:8080</code> and be presented with the webpage hosted on 192.168.0.3.</p>

<h4>Local Port Forward</h4>

<p><img src="/images/ssh-local1.png">
In the image above, the blue host wants to connect to the red host on port 80 but there&rsquo;s a firewall in between which is denying this. Because the blue host can ssh to the red host, we can create a local port forwarding ssh tunnel to access that port.</p>

<p>The command on the blue host will be:
<code>
ssh -L 8080:192.168.0.2:80 reduser@192.168.0.2
</code></p>

<p>Now when the blue host opens a browser and goes to <code>http://localhost:8080</code> they will be able to see whatever the red server has at port 80.</p>

<h4>Local Port Forwarding Syntax</h4>

<p>This syntax to create a local ssh port forwarding tunnel is this:</p>

<p><code>
ssh -L &lt;LPORT&gt;:&lt;RHOST&gt;:&lt;RPORT&gt; &lt;GATEWAY&gt;
</code></p>

<h2>Remote SSH Port Forwarding</h2>

<p>In this scenario we are creating a reverse ssh tunnel. Here we can initiate an ssh tunnel in one direction, then use that tunnel to create an ssh tunnel back the other way. This may be useful for when you drop a drone computer inside a network and want it to &ldquo;phone home&rdquo;. Then when it phones home, you can connect to it through the established ssh tunnel.</p>

<p><img src="/images/ssh-remote.png">
We are on the green host and want to ssh to the blue host. However, the firewall blocks this connection directly. Because the blue host can ssh to the green host, we can connect using that, and when the green host wants to ssh back to the blue host, it can ride along this previously established tunnel.</p>

<p>Blue host initiates ssh tunnel like this:
<code>
ssh -R 2222:localhost:22 greenuser@192.168.0.2
</code></p>

<p>This opens port 2222 on the green host, which is then port forwarding that to port 22 on the blue host. So if the green host were to ssh to itself on port 2222 it would then reach the blue host.</p>

<p>Green host can now ssh to blue host like this:
<code>
ssh -p 2222 blueuser@localhost
</code></p>

<h2>Using the -N Option</h2>

<p>When using ssh, you can specify the <code>-N</code> flag which tells ssh you don&rsquo;t need to send any commands over the ssh connection when it&rsquo;s established. This option is often used when making tunnels since often we don&rsquo;t need to actually get a prompt.</p>

<h2>Autossh</h2>

<p>The autossh command is used to add persistence to your tunnels. The job it has is to verify your ssh connection is up, and if it&rsquo;s not, create it.</p>

<p>Here is an autossh command which you may recognize.
<code>
autossh -N -i /home/blueuser/.ssh/id_rsa -R 2222:localhost:22 greenuser@192.168.0.3
</code></p>

<p>The <code>-i /home/blueuser/.ssh/id_rsa</code> option says to use a certificate to authenticate this ssh connection. Check out this post to <a href="/ssh-without-password/">learn more about ssh certificates</a>.</p>

<p>Now when your tunnel goes down it will automatically try to reconnect and keep trying until it is successful. To make it persistent through a reboot, add the ssh command as a cron job.</p>

<h2>Related Articles</h2>

<ul>
<li><a href="/how-to-ssh-like-a-pro/">How to ssh like a pro</a></li>
<li><a href="/ssh-without-password/">How to ssh without a password</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Site to site VPN between two ASAs]]></title>
    <link href="https://www.tunnelsup.com/site-to-site-vpn-tunnel-using-two-asas/"/>
    <updated>2010-05-02T00:00:00-07:00</updated>
    <id>https://www.tunnelsup.com/site-to-site-vpn-tunnel-using-two-asas</id>
    <content type="html"><![CDATA[<p><img src="/images/asasitetosite.jpg" alt="ASA site to site diagram - IMG" /></p>

<p>The classic site to site VPN tunnel between two ASAs. This configuration script is for ASA versions 8.2.5 and below. The new version has next gen encryption and has different keywords.</p>

<p>After applying the config below the device at 192.168.11.2 should be able to access 172.16.22.2 and vice versa.</p>

<h3>BLUE ASA</h3>

<p>```
!^^^^^^^ ISAKMP (Phase 1) ^^^^^^^!
! must match with the other side in order for Phase 1 to complete.
! Lower policy numbers will likely be used before higher ones.
crypto isakmp policy 5
  authentication pre-share
  encryption aes
  hash sha
  group 2
  lifetime 86400</p>

<p>! Enable ISAKMP on the outside interface crypto isakmp enable OUTSIDE
! Define the pre-shared-key
tunnel-group 22.22.22.22 type ipsec-l2l
tunnel-group 22.22.22.22 ipsec-attributes
  pre-shared-key sekretk3y</p>

<p>!^^^^^^^ IPSEC (Phase 2) ^^^^^^^!
! Define the interesting traffic in the ACL
access-list ACL-RED-VPN permit ip 192.168.11.0 255.255.255.0 172.16.22.0 255.255.255.0
crypto ipsec transform-set ESP-AES128-SHA esp-aes esp-sha-hmac</p>

<p>! Create a crypto map entry that defines the tunnel
crypto map MAP-OUTSIDE 20 set peer 22.22.22.22</p>

<p>! ACL must be exactly the opposite of the other sides ACL
crypto map MAP-OUTSIDE 20 match address ACL-RED-VPN</p>

<p>! Transform set must match other side identically
crypto map MAP-OUTSIDE 20 set transform-set ESP-AES128-SHA
crypto map MAP-OUTSIDE 20 set security-association lifetime kilobytes 10000</p>

<p>! Apply crypto map to an interface
crypto map MAP-OUTSIDE interface OUTSIDE</p>

<p>!^^^^^^^ Routes and No-NATS ^^^^^^^!
! Point the destination network out the outside interface with a next hop as the default gateway.
route OUTSIDE 172.16.22.0 255.255.255.0 11.11.11.1</p>

<p>! Make sure that the VPN traffic is NOT NAT&rsquo;d
access-list ACL-INSIDE-NONAT extended permit ip 192.168.11.0 255.255.255.0 172.16.22.0 255.255.255.0
nat (INSIDE) 0 access-list ACL-INSIDE-NONAT
```</p>

<h3>RED ASA</h3>

<p><code>
!^^^^^^^ ISAKMP (Phase 1) ^^^^^^^!
crypto isakmp policy 15
  authentication pre-share
  encryption aes
  hash sha
  group 2
  lifetime 86400
crypto isakmp enable OUTSIDE
tunnel-group 11.11.11.11 type ipsec-l2l
tunnel-group 11.11.11.11 ipsec-attributes
  pre-shared-key sekretk3y
!^^^^^^^ IPSEC (Phase 2) ^^^^^^^!
access-list ACL-BLUE-VPN permit ip 172.16.22.0 255.255.255.0 192.168.11.0 255.255.255.0
crypto ipsec transform-set ESP-AES128-SHA esp-aes esp-sha-hmac
crypto map MAP-VPN 10 match address ACL-BLUE-VPN
crypto map MAP-VPN 10 set peer 11.11.11.11
crypto map MAP-VPN 10 set transform-set ESP-AES128-SHA
crypto map MAP-VPN 10 set security-association lifetime kilobytes 10000
crypto map MAP-VPN interface OUTSIDE
!^^^^^^^ Routes and No-NATS ^^^^^^^!
route OUTSIDE 192.168.11.0 255.255.255.0 22.22.22.1
access-list ACL-INSIDE-NONAT extended permit ip 1172.16.22.0 255.255.255.0 192.168.11.0 255.255.255.0
nat (INSIDE) 0 access-list ACL-INSIDE-NONAT
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Site to site VPN tunnel between ASA and Router]]></title>
    <link href="https://www.tunnelsup.com/site-to-site-vpn-tunnel-between-asa-and-cisco-router/"/>
    <updated>2010-05-02T00:00:00-07:00</updated>
    <id>https://www.tunnelsup.com/site-to-site-vpn-tunnel-between-asa-and-cisco-router</id>
    <content type="html"><![CDATA[<p><img src="/images/asa-isr.jpg" alt="ASR ISR network diagram- IMG" /></p>

<p>Using the above network diagram, the scripts below can be applied to both ASA&rsquo;s to build a site to site VPN tunnel. The firewall on the left is a Cisco ASA and device on the right is a Cisco Router. The router needs to have an IOS that supports VPN&rsquo;s. You can test this by typing &lsquo;crypto ?&rsquo; and see if it has the commands available to make the tunnel. Usually a router with a K9 image on it is good enough. If not then it&rsquo;ll require the security image to have IPSec capabilities.</p>

<p>After applying the config below the device at 192.168.11.2 should be able to access 172.16.22.2 and vice versa.</p>

<h3>BLUE ASA</h3>

<p><code>
!^^^^^^^ ISAKMP (Phase 1) ^^^^^^^!
! The policy number is arbitrary. The parameters inside the policy
! must match with the other side in order for Phase 1 to complete.
! Lower policy numbers will likely be used before higher ones.
crypto isakmp policy 5
  authentication pre-share
  encryption aes
  hash sha
  group 2
  lifetime 86400
! Enable ISAKMP on the outside interface
crypto isakmp enable OUTSIDE
! Define the pre-shared-key
tunnel-group 22.22.22.22 type ipsec-l2l
tunnel-group 22.22.22.22 ipsec-attributes
  pre-shared-key sekretk3y
!^^^^^^^ IPSEC (Phase 2) ^^^^^^^!
! Define the interesting traffic in the ACL
access-list ACL-RED-VPN permit ip 192.168.11.0 255.255.255.0 172.16.22.0 255.255.255.0
crypto ipsec transform-set ESP-AES128-SHA esp-aes esp-sha-hmac
! Create a crypto map entry that defines the tunnel
crypto map MAP-OUTSIDE 20 set peer 22.22.22.22
! ACL must be exactly the opposite of the other sides ACL
crypto map MAP-OUTSIDE 20 match address ACL-RED-VPN
! Transform set must match other side identically
crypto map MAP-OUTSIDE 20 set transform-set ESP-AES128-SHA
crypto map MAP-OUTSIDE 20 set security-association lifetime kilobytes 10000
! Apply crypto map to an interface
crypto map MAP-OUTSIDE interface OUTSIDE
!^^^^^^^ Routes and No-NATS ^^^^^^^!
! Point the destination network out the outside interface with a next hop as the default gateway.
route OUTSIDE 172.16.22.0 255.255.255.0 11.11.11.1
! Make sure that the VPN traffic is NOT NAT'd
access-list ACL-INSIDE-NONAT extended permit ip 192.168.11.0 255.255.255.0 172.16.22.0 255.255.255.0
nat (INSIDE) 0 access-list ACL-INSIDE-NONAT
</code></p>

<h3>RED ROUTER WITH CRYPTO SUPPORT</h3>

<p>```
!^^^^^^^ ISAKMP (Phase 1) ^^^^^^^!
! Note: The default isakmp settings on a router are Encr:DES Hash:SHA DH:Group 1
! If these settings are used, they will not show under &lsquo;show run&rsquo;
crypto isakmp policy 5
  encr aes
  hash sha
  authentication pre-share
  group 2
crypto isakmp key sekretk3y address 11.11.11.11</p>

<p>!^^^^^^^ IPSEC (Phase 2) ^^^^^^^!
! Define the interesting traffic in the ACL
ip access-list extended ACL-VPN
  permit ip 172.16.22.0 0.0.0.255 192.168.11.0 0.0.0.255
crypto ipsec transform-set AES-SHA esp-aes esp-sha-hmac
crypto map VPN-TUNNEL 1 ipsec-isakmp
  set peer 11.11.11.11
  set transform-set AES-SHA
  match address ACL-VPN</p>

<p>interface Fa0/0
  crypto map VPN-TUNNEL
  ip nat outside</p>

<p>interface Vlan2
  ip nat inside</p>

<p>!^^^^^^^ Routes and No-NATS ^^^^^^^!
! Point the destination network out the outside interface with a next hop as the default gateway.
ip route 192.168.11.0 255.255.255.0 22.22.22.1</p>

<p>! Make sure that the VPN traffic is NOT NAT&rsquo;d
ip access-list extended ACL-NAT
  deny   ip 172.16.22.0 0.0.0.255 192.168.11.0 0.0.0.255
  permit ip any any
ip nat inside source list ACL-NAT interface Fa0/0 overload</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
