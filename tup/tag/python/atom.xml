<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | TunnelsUP]]></title>
  <link href="https://www.tunnelsup.com/tup/tag/python/atom.xml" rel="self"/>
  <link href="https://www.tunnelsup.com/"/>
  <updated>2018-06-04T10:16:37-07:00</updated>
  <id>https://www.tunnelsup.com/</id>
  <author>
    <name><![CDATA[Jack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Cheat Sheet]]></title>
    <link href="https://www.tunnelsup.com/python-cheat-sheet/"/>
    <updated>2017-05-03T11:43:00-07:00</updated>
    <id>https://www.tunnelsup.com/python-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Need a quick cheat sheet for using the Python programming language? Here is a quick reference guide.</p>

<p><img class="center" src="/images/PythonCheatSheet.png">
Download: <a href="/images/PythonCheatSheet.png">[PNG Image]</a> -Â <a href="/images/Python-CheatSheet.pdf">[PDF File]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using For and While Loops in Python]]></title>
    <link href="https://www.tunnelsup.com/using-for-and-while-loops-in-python/"/>
    <updated>2016-09-20T17:48:00-07:00</updated>
    <id>https://www.tunnelsup.com/using-for-and-while-loops-in-python</id>
    <content type="html"><![CDATA[<p>Here are some tools to use to do loops in the Python language.</p>

<h2>The While Loop</h2>

<p>The <code>while</code> statement will continually cycle through the block of code until the condition is no longer true.</p>

<p>A forever loop:</p>

<p>```python
while True:</p>

<pre><code>print('This will never end!')
</code></pre>

<p>```</p>

<p>To use a while loop to cycle through something 5 times, you could use this code.</p>

<p>```python
repeat = 1
while repeat &lt;= 5:</p>

<pre><code>print('Loop number: ' + str(repeat))
repeat += 1
</code></pre>

<p>```</p>

<h3>Using Continue and Break</h3>

<p>The <code>continue</code> statement is used when you want to go back to the beginning of the <code>while</code> loop.</p>

<p>The <code>break</code> statement is used when you want to leave the <code>while</code> loop all together.</p>

<p>```python
while True:</p>

<pre><code>if(we_want_to_start_the_loop_over == True):
    continue
if(we_want_to_end_the_loop == True):
    break
</code></pre>

<p>```</p>

<h2>The For Loop</h2>

<p>Another way to do a loop is using a <code>for</code> statement.</p>

<h3>Using Range</h3>

<p>Here is an example:</p>

<p>```python
sum = 0
for num in range(10):</p>

<pre><code>sum = sum+num
</code></pre>

<p>print(sum)
```</p>

<p>This will loop through 10 times because of the <code>range(10)</code> method and print out the value <strong>45</strong>.</p>

<p>The <code>range()</code> method allows 3 arguments to be passed to it. Here are 3 ways to use it:</p>

<p>```python
for i in range(10):       # will go from 0 to 10 counting by ones</p>

<p>for i in range(5, 10):    # will go from 5 to 10 counting by ones</p>

<p>for i in range(5, 1, -1): # will go from 5 to 1 counting backwards 1 at a time</p>

<p>```</p>

<h3>For Each Item in a List</h3>

<p>If you want to do something with the values of a list, you can cycle through it like this.</p>

<p>```python
grades = [&lsquo;A&rsquo;, &lsquo;C&rsquo;, &lsquo;B&rsquo;, &lsquo;F&rsquo;]
for grade in grades:</p>

<pre><code>print(grade)
</code></pre>

<p>```</p>

<h3>Using Enumerate</h3>

<p>If you want to iterate through a list and make edits to the list you can do this:</p>

<p>```python
grades = [&lsquo;A&rsquo;, &lsquo;C&rsquo;, &lsquo;B&rsquo;, &lsquo;F&rsquo;]
for n,i in enumerate(grades):</p>

<pre><code>if i=='F':
    grades[n]='A'
</code></pre>

<p>```</p>

<p>This changes all your F grades to As!</p>

<h3>Looping Through all Keys</h3>

<p>If using a dictionary, you can loop through all keys this way:</p>

<p>```python
inventory = {&lsquo;apples&rsquo;: 7, &lsquo;peaches&rsquo;: 4}
for fruit in inventory:</p>

<pre><code>print("We have " + str(inventory[fruit]) + ' ' + fruit)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Regular Expressions in Python]]></title>
    <link href="https://www.tunnelsup.com/using-regular-expressions-in-python/"/>
    <updated>2016-09-14T21:44:00-07:00</updated>
    <id>https://www.tunnelsup.com/using-regular-expressions-in-python</id>
    <content type="html"><![CDATA[<p>If you need to do pattern matching on a string within Python, using a regular expression will be the best way to do it. Here are some basic examples to help you with this.</p>

<h2>Import Library</h2>

<p>To use any of the regular expressions you&rsquo;ll need to add this library:</p>

<p><code>
import re
</code></p>

<h2>Regex Compiler</h2>

<p>Create the regex object using the <code>compile()</code> method.</p>

<p><code>python
phone_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
</code></p>

<p>This creates or defines the regex object which we can then use against a string.</p>

<p>The <code>r</code> here indicates a raw string.</p>

<p>I recommend building and testing your regex with a tool like <a href="http://regexpal.com.">http://regexpal.com.</a></p>

<h2>Matching Regex Objects</h2>

<p>Once the regex object is defined you can use the <code>search()</code> method like this:</p>

<p><code>python
phone_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
search_results = phone_regex.search('My number is 310-429-4019.')
</code></p>

<p>The results of this are:</p>

<p>```</p>

<blockquote><blockquote><blockquote><p>print(&lsquo;Results: &rsquo; + search_results.group())
Results: 310-429-4019
```</p></blockquote></blockquote></blockquote>

<p>The <code>search()</code> method will return the <strong>first</strong> match it finds in the string.</p>

<p>The results are stored in the <code>group()</code> method of your variable.</p>

<h2>Using Parenthesis to Form Groups</h2>

<p>If you need to match on a larger string but want to only extract a portion of the string, you can use parenthesis to make more groups.</p>

<p><code>python
phone_regex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
search_results = phone_regex.search('Call me at 310-429-4019.')
</code>
This has created 4 groups shown here:</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>print(&lsquo;Results: &rsquo; + search_results.group())
Results: 310-429-4019
print(&lsquo;Results: &rsquo; + search_results.group(0))
Results: 310-429-4019
print(&lsquo;Results: &rsquo; + search_results.group(1))
Results: 310
print(&lsquo;Results: &rsquo; + search_results.group(2))
Results: 429-4019
```</p></blockquote></blockquote></blockquote>

<h2>Without Regex Compile</h2>

<p>An alternative way to do this is to skip the regex <code>compile()</code> method and use this syntax instead:</p>

<p><code>python
my_string = "Name: Fred, Occupation: Bronto Crane Operator"
parse_data = re.search('Name: (\w*), Occupation: (.*)', my_string)
</code></p>

<p>Results:</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>print(parse_data.group())
Name: Fred, Occupation: Bronto
print(parse_data.group(1))
Fred
print(parse_data.group(2))
Bronto Crane Operator
```</p></blockquote></blockquote></blockquote>

<h2>Ignore Case</h2>

<p>Use the <code>re.IGNORECASE</code> option to ignore capitalization. Example:</p>

<p><code>python
fred_regex = re.compile(r'fred', re.IGNORECASE)
search_results = fred_regex.search('His name is Fred.')
</code></p>

<p>This produces the following results:</p>

<p>```</p>

<blockquote><blockquote><blockquote><p>print(search_results.group())
Fred
```</p></blockquote></blockquote></blockquote>

<p>Pro Tip: You can use the shortcut <code>re.I</code> instead of <code>re.IGNORECASE</code>.</p>

<h2>Using findall()</h2>

<p>While the <code>search()</code> method finds the first occurrence, the <code>findall()</code> method returns every occurrence.</p>

<p><code>python
phone_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
search_results = phone_regex.findall('You can call me at 310-429-4019 or 310-777-4777.')
</code></p>

<p>This turns the <code>search_results</code> variable into a list and has the following results:</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>print(search_results)
[&lsquo;310-429-4019&rsquo;, &lsquo;310-777-4777&rsquo;]
print(search_results[0])
310-429-4019
print(search_results[1])
310-777-4777
```</p></blockquote></blockquote></blockquote>

<h2>Substituting Using a Regex</h2>

<p>You can use the <code>sub()</code> method to substitute a string matching a regex. Example:</p>

<p><code>python
phone_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
scrubbed_phone_numbers = phone_regex.sub('XXX-XXX-XXXX', 'My number is 310-429-4019.')
print(scrubbed_phone_numbers)
</code></p>

<p>This prints <code>My number is XXX-XXX-XXXX.</code>.</p>
]]></content>
  </entry>
  
</feed>
