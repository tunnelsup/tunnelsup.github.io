<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | TunnelsUP]]></title>
  <link href="https://www.tunnelsup.com/tup/tag/misc/atom.xml" rel="self"/>
  <link href="https://www.tunnelsup.com/"/>
  <updated>2017-03-03T20:30:53-08:00</updated>
  <id>https://www.tunnelsup.com/</id>
  <author>
    <name><![CDATA[Jack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Create SSH Tunnels]]></title>
    <link href="https://www.tunnelsup.com/how-to-create-ssh-tunnels/"/>
    <updated>2016-10-09T16:38:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-create-ssh-tunnels</id>
    <content type="html"><![CDATA[<p>Besides sending ssh data, the ssh protocol can tunnel other traffic between two hosts. The most common tunnels are remote and local. Knowing how to spin up an ssh tunnel can help you reach otherwise inaccessible networks and systems.</p>

<p>These examples work from a linux prompt or a macOS terminal. It&rsquo;s possible to do the same thing in Windows using applications like putty or mobaXterm.</p>

<h2>Local ssh Port Forwarding</h2>

<p>You can use a local ssh tunnel when you want to get to a resource that you can&rsquo;t get to directly, but a ssh server that you have access to can. Here are some scenarios.</p>

<h4>Proxy to Remote Server</h4>

<p><img src="/images/ssh-local2.png">
In the image above, the blue host cannot reach <code>http://192.168.0.3</code> but can ssh to 192.168.0.2. The following ssh command executed on the <strong>blue host</strong> will allow the blue host to reach the red host.</p>

<p><code>
ssh -L 8080:192.168.0.3:80 reduser@192.168.0.2
</code></p>

<p>Now the blue host can open a browser, and go to <code>http://localhost:8080</code> and be presented with the webpage hosted on 192.168.0.3.</p>

<h4>Local Port Forward</h4>

<p><img src="/images/ssh-local1.png">
In the image above, the blue host wants to connect to the red host on port 80 but there&rsquo;s a firewall in between which is denying this. Because the blue host can ssh to the red host, we can create a local port forwarding ssh tunnel to access that port.</p>

<p>The command on the blue host will be:
<code>
ssh -L 8080:192.168.0.2:80 reduser@192.168.0.2
</code></p>

<p>Now when the blue host opens a browser and goes to <code>http://localhost:8080</code> they will be able to see whatever the red server has at port 80.</p>

<h4>Local Port Forwarding Syntax</h4>

<p>This syntax to create a local ssh port forwarding tunnel is this:</p>

<p><code>
ssh -L &lt;LPORT&gt;:&lt;RHOST&gt;:&lt;RPORT&gt; &lt;GATEWAY&gt;
</code></p>

<h2>Remote SSH Port Forwarding</h2>

<p>In this scenario we are creating a reverse ssh tunnel. Here we can initiate an ssh tunnel in one direction, then use that tunnel to create an ssh tunnel back the other way. This may be useful for when you drop a drone computer inside a network and want it to &ldquo;phone home&rdquo;. Then when it phones home, you can connect to it through the established ssh tunnel.</p>

<p><img src="/images/ssh-remote.png">
We are on the green host and want to ssh to the blue host. However, the firewall blocks this connection directly. Because the blue host can ssh to the green host, we can connect using that, and when the green host wants to ssh back to the blue host, it can ride along this previously established tunnel.</p>

<p>Blue host initiates ssh tunnel like this:
<code>
ssh -R 2222:localhost:22 greenuser@192.168.0.2
</code></p>

<p>This opens port 2222 on the green host, which is then port forwarding that to port 22 on the blue host. So if the green host were to ssh to itself on port 2222 it would then reach the blue host.</p>

<p>Green host can now ssh to blue host like this:
<code>
ssh -p 2222 blueuser@localhost
</code></p>

<h2>Using the -N Option</h2>

<p>When using ssh, you can specify the <code>-N</code> flag which tells ssh you don&rsquo;t need to send any commands over the ssh connection when it&rsquo;s established. This option is often used when making tunnels since often we don&rsquo;t need to actually get a prompt.</p>

<h2>Autossh</h2>

<p>The autossh command is used to add persistence to your tunnels. The job it has is to verify your ssh connection is up, and if it&rsquo;s not, create it.</p>

<p>Here is an autossh command which you may recognize.
<code>
autossh -N -i /home/blueuser/.ssh/id_rsa -R 2222:localhost:22 greenuser@192.168.0.3
</code></p>

<p>The <code>-i /home/blueuser/.ssh/id_rsa</code> option says to use a certificate to authenticate this ssh connection. Check out this post to <a href="/ssh-without-password/">learn more about ssh certificates</a>.</p>

<p>Now when your tunnel goes down it will automatically try to reconnect and keep trying until it is successful. To make it persistent through a reboot, add the ssh command as a cron job.</p>

<h2>Related Articles</h2>

<ul>
<li><a href="/how-to-ssh-like-a-pro/">How to ssh like a pro</a></li>
<li><a href="/ssh-without-password/">How to ssh without a password</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading ESXi to 5.5 and 6.0 Using a Bootable USB drive and macOS]]></title>
    <link href="https://www.tunnelsup.com/upgrading-esxi-using-a-bootable-usb-drive-and-macos/"/>
    <updated>2016-10-04T20:17:00-07:00</updated>
    <id>https://www.tunnelsup.com/upgrading-esxi-using-a-bootable-usb-drive-and-macos</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not a VMWare expert so when it came time to upgrade my personal free ESXi host it took me a long time to figure it out. I didn&rsquo;t have any fancy tools or paid licenses to assist which meant it had to be done through a bootable USB drive. I had a really hard time figuring out what to do and then creating a bootable ESXi installation USB and wanted to document this for anyone else struggling.</p>

<h2>Download ESXi</h2>

<p>Even if you&rsquo;re doing an upgrade, you need to download the following:</p>

<p><strong>ESXi ISO image (Includes VMware Tools)</strong></p>

<p><a href="https://my.vmware.com/en/web/vmware/evalcenter?p=free-esxi">https://my.vmware.com/en/web/vmware/evalcenter?p=free-esxi</a></p>

<p>This is a free download from VMWare and on the same page is where your free license key is. Save that since you&rsquo;ll need it after the upgrade. It changes with each upgrade.</p>

<h2>Format the USB drive</h2>

<p>First determine which <code>/dev/driveN</code> your USB drive is plugged in to. You can simply do an <code>ls /dev/disk*</code> before and then again after you plug in the USB drive.</p>

<p>Next, you can format the drive using <code>Disk Utility</code> application that comes with macOS. When you format it, make sure to set the file system to FAT, and if you have the option, write it to the master boot record.</p>

<h2>Create a Bootable USB</h2>

<p>For some reason this part tripped me up a lot. Using a Mac running OSX I was able to get this done using UNetbootin.</p>

<h4><a href="https://unetbootin.github.io">Download UNetbootin</a></h4>

<h4>Choose the ISO Image and USB drive</h4>

<p><img class="center" src="/images/esxi-boot1.png"></p>

<h4>Overwrite menu.c32</h4>

<p>Make sure to choose yes on this option.
<img class="center" src="/images/esxi-boot2.png"></p>

<h2>Now Upgrade!</h2>

<p>Power down the ESXi host entirely, plug in a monitor and keyboard, and boot to the USB drive you just made. You&rsquo;ll have the option to install fresh or upgrade an existing ESXi installation.</p>

<p>The rest of this process is described in this video. Even though it is a video for 5.5 it is exactly the same for 6.0.</p>

<p><a href="https://www.youtube.com/watch?v=og6PeyXPQ8A">https://www.youtube.com/watch?v=og6PeyXPQ8A</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to remove meta data from a Visio document]]></title>
    <link href="https://www.tunnelsup.com/how-to-remove-meta-data-from-a-visio-document/"/>
    <updated>2016-10-02T12:59:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-remove-meta-data-from-a-visio-document</id>
    <content type="html"><![CDATA[<p>If you create a Visio diagram and either save it or convert it to a PDF, it will contain personal meta data in it. It will try to insert your name and company name.  This is sort of like exif data on an image. It&rsquo;s a good idea to sanitize and remove all personal information before sharing it with anyone. To remove this personal data from a Visio document do the following.</p>

<h2>1. Click File > Info > Remove Personal Information</h2>

<p><img src="/images/visio-removemeta1.PNG"></p>

<h2>2. Confirm the Removal</h2>

<p><img src="/images/visio-removemeta2.PNG"></p>

<p>Now when the document is saved and when a PDF is generated, the personal information will not be in the document.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to remove meta data from a PDF document]]></title>
    <link href="https://www.tunnelsup.com/how-to-remove-meta-data-from-a-pdf-document/"/>
    <updated>2016-09-29T23:02:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-remove-meta-data-from-a-pdf-document</id>
    <content type="html"><![CDATA[<p>Some PDF documents contain meta data which may contain the user&rsquo;s name that made it, the company they work for, their address, and more. This is sort of like exif data on an image. It&rsquo;s a good idea to sanitize any PDF before posting it to the Internet. To remove this personal data from a PDF do the following.</p>

<ol>
<li><p>Open Document in Adobe Acrobat
You&rsquo;ll need Acrobat and not simply Acrobat Reader. This tutorial used Adobe Acrobat XI.</p></li>
<li><p>Click the Tools Button
On the top right corner of the PDF click the Tools button.<br>
<img src="/images/pdf-meta1.PNG"></p></li>
<li><p>Click Sanitize
At the bottom of the tools is a Protection menu, expand it, and find the sanitize option.<br>
<img src="/images/pdf-meta2.PNG"></p></li>
<li><p>Confirm Sanitization
A popup box shows up and lets you verify what will be sanitized. <br>
<img src="/images/pdf-meta3.PNG"></p></li>
</ol>


<p>You&rsquo;ll then be prompted to save the sanitized document.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set a static IP on Mac OSX]]></title>
    <link href="https://www.tunnelsup.com/how-to-set-a-static-ip-on-mac-osx/"/>
    <updated>2016-09-22T21:28:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-set-a-static-ip-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Are you using a Macbook Pro or Macbook Air and want to know how to show the change the interface to use a static IP? Follow the steps below to complete this.</p>

<h2>1. Go to Preferences</h2>

<p>Click the Apple icon in the top left corner and click System Preferences.</p>

<p><img src="/images/mac-set-ip1.png" alt="Static IP" /><br></p>

<h2>2. Go to Network Settings</h2>

<p>Now find the <code>Network</code> icon and click it.</p>

<p><img src="/images/mac-set-ip2.png" alt="Static IP" /><br></p>

<h2>3. Change the Settings</h2>

<p>Find the interface you want to change the settings on and click it. Then select the interface settings you want to us. To set a static IP select the options <code>Manually</code> and fill in the fields. You can also set it to be DHCP where you&rsquo;ll be assigned an address automatically by a router.
<img src="/images/mac-set-ip3.png" alt="Static IP" /><br></p>

<p>If you need to change the DNS settings, click <code>advanced</code>.</p>

<p>Once done click apply and your settings should be applied right away.</p>
]]></content>
  </entry>
  
</feed>
