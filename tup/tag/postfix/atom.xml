<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: postfix | TunnelsUP]]></title>
  <link href="https://www.tunnelsup.com/tup/tag/postfix/atom.xml" rel="self"/>
  <link href="https://www.tunnelsup.com/"/>
  <updated>2017-05-17T23:33:25-07:00</updated>
  <id>https://www.tunnelsup.com/</id>
  <author>
    <name><![CDATA[Jack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SMTP error 451]]></title>
    <link href="https://www.tunnelsup.com/smtp-error-451/"/>
    <updated>2015-02-21T17:11:00-08:00</updated>
    <id>https://www.tunnelsup.com/smtp-error-451</id>
    <content type="html"><![CDATA[<p>SMTP error 451 will occur on a mail server when there is a local error to the mail server that is processing the message. This error may also be referenced as 4.5.1. The error code can either be visible from the mail logs on the mail server or in response to a message that generated the error.</p>

<p>See this page for a full list of <a href="/smtp-error-codes/">SMTP error codes</a>.</p>

<h3>Common reasons for this error</h3>

<ul>
<li>The recipient mail server is overwhelmed and was unable to accept the message. Try again later.</li>
<li>DNS error. Mail servers should verify they only receive mail from valid domains. Check SPF records of sending server. Verify sender domain resolve properly and is using a FQDN when initiating the EHLO handshake.</li>
<li>If recipient mail server is using LDAP for mailbox lookups it may be unable to contact the LDAP server.</li>
<li>Message has been blocked by anti-spam filter on receiving mail server.</li>
</ul>


<h4>Error messages</h4>

<p>Here are some common error messages seen when SMTP error code 451 shows up:</p>

<p><code>
SMTP error 451 Unable to complete command, DNS not available or timed out
</code></p>

<p><code>
451 Domain of sender address does not resolve
</code></p>

<p><code>
451 Error getting LDAP results in map
</code></p>

<p><code>
451 4.7.1 Greylisting in action, please come back in 00:02:00 [minutes]
</code></p>

<p><code>
The message that you sent has been delayed. The reason given for the delay : 451 Temporary local problem - please try later.
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SMTP error 550]]></title>
    <link href="https://www.tunnelsup.com/smtp-error-550/"/>
    <updated>2015-02-21T12:53:00-08:00</updated>
    <id>https://www.tunnelsup.com/smtp-error-550</id>
    <content type="html"><![CDATA[<p>When email is rejected due to SMTP error 550 (also known as SMTP error 5.5.0), this usually means the message could not be delivered because the mailbox is unavailable. This is almost always a problem with the receiving mail server and never a problem with the sending client.</p>

<p>See this page for a full list of <a href="/smtp-error-codes/">SMTP error codes</a>.</p>

<h2>The usual suspects</h2>

<p>SMTP error 550 is usually caused by one of the following:</p>

<ul>
<li>Recipient&rsquo;s email address has a typo</li>
<li>No such recipient address exists on the receiving server</li>
<li>Anti-spam filtering on receiving server has blocked the message</li>
<li>Outbound mail filtering on the sending server has blocked the message</li>
<li>Message rejected by sending SMTP server due to SMTP authentication failure</li>
<li>Receiving mail server is down</li>
<li>Recipient&rsquo;s mailbox is suspended, disabled, inactive, or closed</li>
<li>Recipient&rsquo;s mail server does not have MX records configured correctly</li>
</ul>


<p>Here are a few troubleshooting steps to resolve SMTP error 550.</p>

<h3>Check that recipient address is valid</h3>

<p>Sometimes the 550 error simply means the recipient address is not found or not valid. In this case check that the user does exist and that there isn&rsquo;t a typo in the address.</p>

<p>If running postfix you can see this in /var/log/mail.log:</p>

<p><code>
postfix/smtpd[28384]: NOQUEUE: reject: RCPT from mail-ie0-f171.google.com[209.85.223.171]: 550 5.1.1 &lt;nosuchuser@example.com&gt;: Recipient address rejected: User unknown in virtual mailbox table; from=&lt;someuser@gmail.com&gt; to=&lt;nosuchuser@example.com&gt; proto=ESMTP helo=&lt;mail-ie0-f171.google.com&gt;
</code></p>

<p>In fact the user gets a reply email often from the server with the reason explained further also.</p>

<p>Postfix response to sender:</p>

<p><code>
550 5.1.1 &lt;nosuchuser@example.com&gt;: Recipient address rejected: User unknown in virtual mailbox table
</code></p>

<p>GMail response to sender:</p>

<p><code>
The error that the other server returned was:
550-5.1.1 The email account that you tried to reach does not exist. Please try
550-5.1.1 double-checking the recipient's email address for typos or
550-5.1.1 unnecessary spaces.
</code></p>

<h3>Check that there aren&rsquo;t any anti-spam filters blocking</h3>

<p>Mail servers can sometimes reject a message with error 550 due to an anti-spam filter blocking the message. The mail server admin may be able to add the address to a whitlelist in order to allow the message through if it is being blocked by an anti-spam filter.</p>

<p>Reject messages may look like this:</p>

<p><code>
22.222.22.222 does not like recipient.
</code></p>

<p><code>
550-Previous (cached) callout verification failure
</code></p>

<p><code>
550 Sender verify failed
</code></p>

<p><code>
Remote host said: 550-Verification failed for someuser@example.com
</code></p>

<h3>Check outbound mail rules aren&rsquo;t blocking</h3>

<p>Some organizations have outbound mail rules set up. This is where mail is inspected before leaving the sender&rsquo;s network. A device like Cisco Ironport or MessageLabs can do outbound inspection. This is set up to prevent specific data leaving the network (like social security numbers), stop outbound spam, and other potentially bad situations. SMTP error 550 may generate from one of these systems that is inspecting outbound mail.</p>

<p><code>
Response: 550 Cyberoam Anti Spam Engine has identified
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Postfix RFC Compliant]]></title>
    <link href="https://www.tunnelsup.com/making-postfix-rfc-compliant/"/>
    <updated>2015-02-14T20:47:00-08:00</updated>
    <id>https://www.tunnelsup.com/making-postfix-rfc-compliant</id>
    <content type="html"><![CDATA[<p>By default <a href="http://www.postfix.org/">Postfix</a> is not RFC compliant. Here are some helpful tips to getting your Postfix installation conform to the email RFCs.</p>

<h3>What is RFC?</h3>

<p>Mainly this document is covering <a href="http://tools.ietf.org/html/rfc2821">RFC 2821</a>. This is publication created by the Internet Engineering Task Force (IETF) which aims to standardize how the SMTP protocol should behave. By adhering to the standard you will be promoting best practices and taking steps to safeguarding your mail server from abusers.</p>

<h3>Require HELO</h3>

<p>In the <code>/etc/postfix/main.cf</code> add the following:</p>

<p><code>
smtpd_helo_required = yes
</code></p>

<p>This makes sure that clients introduce themselves properly before continuing. It means the first command accepted from the client is &ldquo;EHLO&rdquo; or &ldquo;HELO&rdquo;.</p>

<h3>SMTP Recipient Restrictions</h3>

<p>Again in <code>main.cf</code> add the following lines:</p>

<p><code>
smtpd_recipient_restrictions =
 reject_non_fqdn_sender
 reject_non_fqdn_recipient
 reject_unknown_sender_domain
 reject_unknown_recipient_domain
 permit_mynetworks
 reject_unauth_destinations
 reject_multi_recipient_bounce
 reject_non_fqdn_hostname
 reject_invalid_hostname
 permit
</code></p>

<p>If you have other permits such as <code>permit_sasl_authenticated</code>, that should go right after <code>permit_mynetowrks</code>.</p>

<p>The <a href="http://www.postfix.org/postconf.5.html#smtpd_recipient_restrictions">smtp_recipient_restrictions</a> command specifies what mail postfix should receive. This actually applies to both incoming and outgoing mail because in either destination postfix still has to make the decision on whether to accept the message or not.</p>

<p>The way this command works is that the checks stop on the first match. The default policy at the end is to permit everything else. We add the permit statement so this is more clear. Our goal is to block all traffic that does not conform to RFC standards or isn&rsquo;t on our network or isn&rsquo;t a legitimate user. If the message passes all the reject checks then it finally gets permitted.</p>

<p>The order of operation is important because if you notice up to and including the first permit these checks will be applied to both internal and external users. The permits in the middle (in case you added sasl permit too) will permit any internal user or authenticated user trying to send mail to somewhere else. If there is a match on these permits then the rest of the checks never get checked. The remaining reject checks will only be applied to external clients trying to send mail inbound to Postfix.</p>

<h5>reject_non_fqdn_sender</h5>

<p>The RFC requires a fully qualified domain names for both sender and recipient. This command will reject &lsquo;sender&rsquo; or &lsquo;from&rsquo; fields that contain partial domain names. For instance with this line, Postfix will reject mail from <code>example@example</code>. The domain portion of this address is not a FQDN and probably should have been written as <code>example@example.com</code>.</p>

<h5>reject_non_fqdn_recipient</h5>

<p>This command will reject the &lsquo;recipient&rsquo; or &lsquo;to&rsquo; fields from containing a partial domain name in the server portion of the address.</p>

<h5>reject_unknown_sender_domain</h5>

<p>This setting will attempt to do a DNS lookup on the &lsquo;sender&rsquo; or &lsquo;from&rsquo; domain name. If the &lsquo;from&rsquo; field states <code>example@no.such.domain</code> the Postfix server will reject this because it cannot resolve <code>no.such.domain</code>.</p>

<h5>reject_unknown_recipient_domain</h5>

<p>This setting will attempt to do a DNS lookup on the &lsquo;recipient&rsquo; or &lsquo;to&rsquo; domain name.</p>

<h5>reject_unauth_destinations</h5>

<p>This setting will check if recipient domain is something that Postfix responds to.</p>

<h5>reject_non_fqdn_hostname</h5>

<p>This setting requires clients to complete the HELO with their FQDN. The RFC requires an FQDN be presented in the initial HELO.</p>

<h5>reject_invalid_hostname</h5>

<p>This setting will reject hostnames that are incomplete or use invalid characters. This step is checked at the initial HELO.</p>

<h3>Mandatory accounts</h3>

<p>According to both RFC2821 and <a href="http://tools.ietf.org/html/rfc2142">RFC2142</a> these addresses should be valid.</p>

<ul>
<li>postmaster</li>
<li>abuse</li>
<li>webmaster (if running a webserver)</li>
<li>hostmaster (if running a DNS server)</li>
</ul>


<p>That is if your mail domain is example.com you must accept mail for <code>postmaster@example.com</code> to be compliant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SMTP Error Codes]]></title>
    <link href="https://www.tunnelsup.com/smtp-error-codes/"/>
    <updated>2015-02-14T11:05:00-08:00</updated>
    <id>https://www.tunnelsup.com/smtp-error-codes</id>
    <content type="html"><![CDATA[<p>The following table displays the SMTP error or response codes. This is sometimes written like &ldquo;512&rdquo; and sometimes written like &ldquo;5.1.2&rdquo;. These two ways of writing the code are synonymous.</p>

<table class="table">
    <thead>
        <th>Code</th>
        <th>Meaning</th>
    </thead>
    <tbody>
        <tr>
            <td>211</td>
            <td>Indicates the system status or system help reply</td>
        </tr>
        <tr>
            <td>214</td>
            <td>Help message</td>
        </tr>
        <tr>
            <td>220</td>
            <td>Service ready</td>
        </tr>
        <tr>
            <td>221</td>
            <td>Service closing transmission channel</td>
        </tr>
        <tr>
            <td>250</td>
            <td>Requested mail action ok, completed</td>
        </tr>
        <tr>
            <td>251</td>
            <td>User not local</td>
        </tr>
        <tr>
            <td>252</td>
            <td>Cannot VRFY user, but will still accept message and attempt to deliver</td>
        </tr>
        <tr>
            <td>354</td>
            <td>Start mail input</td>
        </tr>
        <tr>
            <td>421</td>
            <td>Service not available, closing transmission channel</td>
        </tr>
        <tr>
            <td>450</td>
            <td>Requested mail action not taken: mailbox unavailable</td>
        </tr>
        <tr>
            <td>451</td>
            <td><a href="https://www.tunnelsup.com/smtp-error-451/">Requested mail action aborted: local error</a></td>
        </tr>
        <tr>
            <td>452</td>
            <td>Requested action not taken: insufficient storage</td>
        </tr>
        <tr>
            <td>500</td>
            <td>Syntax error - command not recognized</td>
        </tr>
        <tr>
            <td>501</td>
            <td>Syntax error in command, parameters, or message fields</td>
        </tr>
        <tr>
            <td>502</td>
            <td>Command not implemented</td>
        </tr>
        <tr>
            <td>503</td>
            <td>Bad sequence of commands or authentication required to use command</td>
        </tr>
        <tr>
            <td>504</td>
            <td>Command parameter not implemented</td>
        </tr>
        <tr>
            <td>510</td>
            <td>Bad email address</td>
        </tr>       
        <tr>
            <td>511</td>
            <td>Bad email address</td>
        </tr>
        <tr>
            <td>512</td>
            <td>Unable to resolve recipient domain (DNS error)</td>
        </tr>
        <tr>
            <td>513</td>
            <td>Address type is incorrect</td>
        </tr>
        <tr>
            <td>523</td>
            <td>Message too large for recipient's mailbox</td>
        </tr>

        <tr>
            <td>530</td>
            <td>Authentication required or server blacklisted by recipient or no such recipient mailbox</td>
        </tr>
        <tr>
            <td>541</td>
            <td>Recipient address rejected - blocked by antispam, intrusion prevention, or mail filtering</td>
        </tr>
        <tr>
            <td>550</td>
            <td><a href="https://www.tunnelsup.com/smtp-error-550/">Recipient mailbox unavailable</a></td>
        </tr>
        <tr>
            <td>551</td>
            <td>Invalid recipient address; relay denied</td>
        </tr>
        <tr>
            <td>552</td>
            <td>Size of incoming message exceeds storage limit</td>
        </tr>
        <tr>
            <td>553</td>
            <td>Mailbox name invalid or authentication required or reverse DNS lookup failure</td>
        </tr>
        <tr>
            <td>554</td>
            <td>Transaction failed - address doesn't exist or rejected due to blacklist</td>
        </tr>

    </tbody>
</table>


<h4>Further reading</h4>

<p>Official documentation:<br>
<a href="https://www.iana.org/assignments/smtp-enhanced-status-codes/smtp-enhanced-status-codes.xhtml">https://www.iana.org/assignments/smtp-enhanced-status-codes/smtp-enhanced-status-codes.xhtml</a></p>

<p>More helpful information for each reply code:<br>
<a href="http://www.answersthatwork.com/Download_Area/ATW_Library/Networking/Network__3-SMTP_Server_Status_Codes_and_SMTP_Error_Codes.pdf">http://www.answersthatwork.com/Download_Area/ATW_Library/Networking/Network__3-SMTP_Server_Status_Codes_and_SMTP_Error_Codes.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using salted SHA hashes with Dovecot authentication]]></title>
    <link href="https://www.tunnelsup.com/using-salted-sha-hashes-with-dovecot-authentication/"/>
    <updated>2015-02-08T13:25:00-08:00</updated>
    <id>https://www.tunnelsup.com/using-salted-sha-hashes-with-dovecot-authentication</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve finally figured out how to do this. The <a href="http://wiki2.dovecot.org/Authentication/PasswordSchemes">Dovecot documentation</a> is absolutely horrible which is sad because it should be encouraged to always salt your password hashes yet they make it very difficult to figure out.</p>

<p>Dovecot is a IMAP and POP3 plugin for Postfix. Postfix doesn&rsquo;t do authentication on its own so it&rsquo;s often found that SASL authentication gets passed to Dovecot for both IMAP mail checking and creating dynamic relay lists.</p>

<h3>Goal</h3>

<p>We want to get Dovecot authentication to use salted SHA password hashes. The password hashes are stored in a mysql database and were created using ruby, python, or php.</p>

<p>You should never be saving user passwords. It&rsquo;s better to only store the hash of a user&rsquo;s passwords. But don&rsquo;t stop there, add some complexity to the hash. By salting the password hash it significantly complicates the cracking process. It&rsquo;s also best practices to have a unique salt for every password hash.</p>

<h3>Format of the hash</h3>

<p>The Dovecot documentation says the password hash must be in the following format when presented to Dovecot for comparing. (It can be in base64 or hex.)</p>

<p><code>{SSHA256.hex}4a847fefc4f9ab450f16783c5025d64313942a1ceb2599707cdb65940ba901e513fa442f</code></p>

<p>This is a string with the following in it:</p>

<ul>
<li><code>{SSHA256}</code> This is the beginning of the string which tells Dovecot what kind of hash this is. In this case &lsquo;SSH256&rsquo; means Salted SHA 256 bit.</li>
<li><code>4a847fefc4f9ab450f16783c5025d64313942a1ceb2599707cdb65940ba901e5</code> is the salted hash. Dovecot knows only that portion is the salted hash because a SHA256 hash will be 32 bytes long.</li>
<li><code>13fa442f</code> is the salt. Dovecot knows this is the salt because it assumes everything after the hash will be the salt because we indicated &ldquo;SSHA&rdquo; which is a salted SHA hash.</li>
</ul>


<p>You can actually verify this against Dovecot with the following command line:</p>

<p><code>
$ doveadm pw -t {SSHA256.hex}4a847fefc4f9ab450f16783c5025d64313942a1ceb2599707cdb65940ba901e513fa442f -p pass
{SSHA256.hex}4a847fefc4f9ab450f16783c5025d64313942a1ceb2599707cdb65940ba901e513fa442f (verified)
</code></p>

<p>The command above asks the Dovecot authentication compare program to check the hash given against the password &ldquo;pass&rdquo;. The result is <strong>verified</strong> which means this password matches the hash.</p>

<h3>Create the hash</h3>

<p>The are many ways to create the hash. You can use php, python, ruby, bash, or even mysql itself to hash the password. In the cases below we are creating a base64 hash.</p>

<h5>Ruby</h5>

<p>Using ruby or ruby on rails we can create the hash this way:</p>

<p><code>ruby
salt = SecureRandom.hex(32) # Creates a 64 byte random hex string
hash = Base64.strict_encode64(Digest::SHA512.digest("password"+salt) + salt)
</code></p>

<p>You can test this code using the rails console.</p>

<h5>Python</h5>

<p>Using python or any of the python web frameworks like django we can create the hash this way:</p>

<p>```python
import base64
import hashlib
import os</p>

<p>salt = os.urandom(64) # Creates a random 64 byte string
shahash = hashlib.sha512()
shahash.update(&ldquo;password&rdquo;)
shahash.update(salt)</p>

<p>shahashsalt = &lsquo;{}{}&rsquo;.format(shahash.digest(), salt)</p>

<p>hash = base64.b64encode(hashsalt)
```</p>

<p>You can test this code from the python console. Thanks to <a href="https://gist.github.com/garrettreid/8329796">this gist</a> for helping me out with this.</p>

<h5>PHP</h5>

<p><a href="http://stackoverflow.com/questions/6713521/how-to-securely-generate-ssha256-or-ssha512-hashes-in-php">This stackoverflow question</a> goes over how to create the hash in PHP. I have not tested this one though.</p>

<h3>Test the hash using Dovecot</h3>

<p>Suppose the following:<br>
Our salt is: <code>2fec1ee0940e7c436ef2037e89e4c06ca20b281a90dbb2d6cbd3534aa4ce7e19</code><br>
Our password is: <code>test</code></p>

<p>This would result in the following <strong>salted</strong> hash:<br>
<code>text
4a1e8a61780f449ef6cbc883b5cf57279d32fd004cb7298ddb6f8c46bf246187c03f1bf9447044708767a826e65f977e5c95a490abf8f2c3ca90c7a0ea2b89e8
</code></p>

<p>And when concatenating the salt to the end and converting to base64 we&rsquo;d get this:<br>
<code>text
Sh6KYXgPRJ72y8iDtc9XJ50y/QBMtymN22+MRr8kYYfAPxv5RHBEcIdnqCbmX5d+XJWkkKv48sPKkMeg6iuJ6DJmZWMxZWUwOTQwZTdjNDM2ZWYyMDM3ZTg5ZTRjMDZjYTIwYjI4MWE5MGRiYjJkNmNiZDM1MzRhYTRjZTdlMTk=
</code></p>

<p>We can test this string using the <code>doveadm pw</code> command from the linux command line (provided Dovecot is installed):</p>

<p><code>
$ doveadm pw -t {SSHA512}Sh6KYXgPRJ72y8iDtc9XJ50y/QBMtymN22+MRr8kYYfAPxv5RHBEcIdnqCbmX5d+XJWkkKv48sPKkMeg6iuJ6DJmZWMxZWUwOTQwZTdjNDM2ZWYyMDM3ZTg5ZTRjMDZjYTIwYjI4MWE5MGRiYjJkNmNiZDM1MzRhYTRjZTdlMTk= -p test
{SSHA512}Sh6KYXgPRJ72y8iDtc9XJ50y/QBMtymN22+MRr8kYYfAPxv5RHBEcIdnqCbmX5d+XJWkkKv48sPKkMeg6iuJ6DJmZWMxZWUwOTQwZTdjNDM2ZWYyMDM3ZTg5ZTRjMDZjYTIwYjI4MWE5MGRiYjJkNmNiZDM1MzRhYTRjZTdlMTk= (verified)
</code></p>

<p>The <code>-t</code> indicates we are going to give the hash and the <code>-p</code> indicates which password to use for hashing. The hash we give indicates this is a <strong>S</strong>alted SHA512 and is long enough to indicate the salted hash with the salt appended to the end of the string. So doveadm will take the first 64 bytes of the hash off and the rest of the bytes are the salt. It will then hash the word &ldquo;test&rdquo; with SHA512 using the salt provided and then test that against the hash provided. The result is <strong>verified</strong> which means the hashes match.</p>

<h3>Configure Dovecot</h3>

<p>Suppose the username and hashed password is stored in the mysql table &ldquo;users&rdquo;. Let&rsquo;s now configure Dovecot to get that information for it&rsquo;s authentication.</p>

<p>First make sure Dovecot is handling the authentication by configuring Postfix. Add the lines to <code>/etc/postfix/main.conf</code>:</p>

<p><code>
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth
smtpd_sasl_auth_enable = yes
</code></p>

<p>Edit the <code>/etc/dovecot/conf.d/10-auth.conf</code> file and make sure the following are in it:</p>

<p><code>
auth_mechanisms = plain login
!include auth-sql.conf.ext
</code></p>

<p>Edit the <code>/etc/dovecot/conf.d/auth-sql.conf.ext</code> file and put the following in it:</p>

<p><code>
passdb {
  driver = sql
  args = /etc/dovecot/dovecot-sql.conf.ext
}
</code></p>

<p>Edit the <code>/etc/dovecot/dovecot-sql.conf.ext</code> file and put the following in it:</p>

<p>```
driver = mysql</p>

<p>connect = host=127.0.0.1 dbname=mydatabase user=sqluser password=sqluserpassword</p>

<p>default_pass_scheme = SSHA512</p>

<p>password_query = SELECT username as user, CONCAT(&ldquo;{SSHA512}&rdquo;, password_hash) as password FROM users WHERE username=&lsquo;%n&rsquo;;
```</p>

<p>You&rsquo;ll have to adjust the <code>connect</code> and <code>password_query</code> parameters to be what your database requires for the properly mysql authentication and lookups. Take note here that Dovecot expects this command to return a <code>user</code> and <code>password</code> column in the result. So if your mysql columns don&rsquo;t say that, use the <code>as</code> mysql command to fix that. Also note that we are adding <code>{SSHA512}</code> to the front of the <code>password</code> because this is what Dovecot wants.</p>

<p>Once that is done restart Dovecot by doing <code>sudo services dovecot restart</code>.</p>

<h3>Verify/Troubleshoot</h3>

<p>At this point you should be able to authenticate to Dovecot with your password which is stored using a salted hash algorithm.</p>

<p>If this isn&rsquo;t working for you then check <code>/var/log/mail.log</code> to see if there are any errors. Turn on additional debugging by editing the file <code>/etc/dovecot/conf.d/10-logging.conf</code> and add/uncomment this line:</p>

<p><code>auth_debug_passwords = yes</code></p>

<p>Now when you check mail.log you may see the following:</p>

<p><code>text
auth-worker(27083): sql(testuser,1.1.1.1): Password mismatch
auth-worker(27083): Debug: sql(testuser,1.1.1.1): SSHA512.HEX(test) != '3b98564e1ae8ec5d70cb7b9ea457e1ad833628da9f37211e73d1dc80b8c4c271d65de63a5e4fdde4e0c62cc13995619a3ba22441a892c06f4395d5f46e3fe3df5db034e27bda3045ef9e6057eb4799ea9c05d35c6a3b361697b20689ce44b16d5db034e27bda3045ef9e6057eb4799ea9c05d35c6a3b361697b20689ce44b16d'
</code></p>

<p>This will show you the hash that&rsquo;s being checked and the hashing type Dovecot is trying. You can test this manually by using the <code>doveadm pw</code> command covered above in the Test section of this page.</p>

<p>My biggest problem was creating a salted hash the correct way. Verify that the hash you&rsquo;re creating works against <code>doveadm pw</code> before adding the Dovecot configuration.</p>
]]></content>
  </entry>
  
</feed>
