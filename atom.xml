<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TunnelsUP]]></title>
  <link href="https://www.tunnelsup.com/atom.xml" rel="self"/>
  <link href="https://www.tunnelsup.com/"/>
  <updated>2017-05-03T20:05:57-07:00</updated>
  <id>https://www.tunnelsup.com/</id>
  <author>
    <name><![CDATA[Jack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Cheat Sheet]]></title>
    <link href="https://www.tunnelsup.com/python-cheat-sheet/"/>
    <updated>2017-05-03T11:43:00-07:00</updated>
    <id>https://www.tunnelsup.com/python-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Need a quick cheat sheet for using the Python programming language? Here is a quick reference guide.</p>

<p><img class="center" src="https://www.tunnelsup.com/images/PythonCheatSheet.png">
Download: <a href="https://www.tunnelsup.com/images/PythonCheatSheet.png">[PNG Image]</a> - <a href="https://www.tunnelsup.com/images/Python-CheatSheet.pdf">[PDF File]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAESU-FT60 Cheat Sheet]]></title>
    <link href="https://www.tunnelsup.com/yaesu-ft60-cheat-sheet/"/>
    <updated>2017-05-03T11:36:00-07:00</updated>
    <id>https://www.tunnelsup.com/yaesu-ft60-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Need a quick reference guide for the YAESU FT60 ham radio? Here is a cheat sheet for using it.</p>

<p><img class="center" src="https://www.tunnelsup.com/images/YAESU-FT60.png">
Download: <a href="https://www.tunnelsup.com/images/YAESU-FT60.png">[PNG Image]</a> - <a href="https://www.tunnelsup.com/images/YAESU-FT60-CheatSheet.pdf">[PDF File]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux TTY and Terminal Commands]]></title>
    <link href="https://www.tunnelsup.com/linux-tty-and-terminal-commands/"/>
    <updated>2017-05-03T11:19:00-07:00</updated>
    <id>https://www.tunnelsup.com/linux-tty-and-terminal-commands</id>
    <content type="html"><![CDATA[<p>A few notes for using the Linux TTY terminal.</p>

<h2>Switch Terminals</h2>

<p>You can switch TTY terminals by doing:</p>

<p><code>CNTRL</code>+<code>ALT</code>+<code>F#</code></p>

<p>F2 will take you to TTY2, F3 TTY3 etc.</p>

<p>If you are using a Linux GUI, you can still use this combo to switch to the console. To get back to the GUI do <code>CNTRL</code>+<code>ALT</code>+<code>F7</code>.</p>

<h2>Scrolling</h2>

<p>If you need to scroll up or town while at the console, do:</p>

<p><code>SHIFT</code>+<code>PG UP/DOWN</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Juniper SRX Configurations for Route Based and Policy Based VPN]]></title>
    <link href="https://www.tunnelsup.com/juniper-srx-configurations-for-route-based-and-policy-based-vpn/"/>
    <updated>2017-03-03T20:32:00-08:00</updated>
    <id>https://www.tunnelsup.com/juniper-srx-configurations-for-route-based-and-policy-based-vpn</id>
    <content type="html"><![CDATA[<p>There are two types site-to-site of VPNs on a Juniper SRX, policy based and route based. The policy based puts the traffic in a tunnel that is defined by a policy or ACL. The route based will put all traffic in the tunnel that is routed out a specific interface.</p>

<h2>Route Based VPN</h2>

<p>In this configuration example, our peer is <code>22.22.22.22</code>. Both sides of the tunnel must be configured for route based VPN. To do this, we&rsquo;ll create an interface <code>st0</code> and route traffic into that interface. The SRX will tunnel all traffic going into that interface and send it over the VPN.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'># Create the interface, add it to a zone, and route traffic to it
</span><span class='line'>set interfaces st0 unit 0 family inet address 192.168.180.1/32
</span><span class='line'>set security zones security-zone untrust interfaces st0.0 host-inbound-traffic system-services ike
</span><span class='line'>set routing-options static route 172.16.100.0/24 next-hop st0.0
</span><span class='line'>
</span><span class='line'># Create the IKE proposal
</span><span class='line'>set security ike propasal IKE-DH2-MD5-3DES authentication-method pre-shared-keys
</span><span class='line'>set security ike propasal IKE-DH2-MD5-3DES dh-group group2
</span><span class='line'>set security ike propasal IKE-DH2-MD5-3DES authentication-algorithm md5
</span><span class='line'>set security ike propasal IKE-DH2-MD5-3DES encryption-algorithm 3des-cbc
</span><span class='line'>set security ike propasal IKE-DH2-MD5-3DES lifetime-seconds 86400
</span><span class='line'>
</span><span class='line'># Create the IKE policy
</span><span class='line'>set security ike policy IKE-POLICY-CHI mode main
</span><span class='line'>set security ike policy IKE-POLICY-CHI proposals IKE-DH2-MD5-3DES
</span><span class='line'>set security ike policy IKE-POLICY-CHI pre-shared-key ascii-text mysekr3tkey
</span><span class='line'>
</span><span class='line'># Create the IKE gateway
</span><span class='line'>set security ike gateway IKE-GATEWAY-CHI ike-policy IKE-POLICY
</span><span class='line'>set security ike gateway IKE-GATEWAY-CHI address 22.22.22.22
</span><span class='line'>set security ike gateway IKE-GATEWAY-CHI dead-peer-detection interval 20
</span><span class='line'>set security ike gateway IKE-GATEWAY-CHI dead-peer-detection threshold 5
</span><span class='line'>set security ike gateway IKE-GATEWAY-CHI external-interface ge-0/0/1.0
</span><span class='line'>
</span><span class='line'># Create the IPSEC proposals
</span><span class='line'>set security ipsec proposal IPSEC-ESP-MD5-3DES protocol esp
</span><span class='line'>set security ipsec proposal IPSEC-ESP-MD5-3DES authentication-algorithm hmac-md5-96
</span><span class='line'>set security ipsec proposal IPSEC-ESP-MD5-3DES encryption-algorithm 3des-cbc
</span><span class='line'>set security ipsec proposal IPSEC-ESP-MD5-3DES lifetime-seconds 3200
</span><span class='line'>
</span><span class='line'># Create the IPSEC policy
</span><span class='line'>set security ipsec policy IPSEC-POLICY-CHI perfect-forward-secrecy keys group2
</span><span class='line'>set security ipsec policy IPSEC-POLICY-CHI proposals IPSEC-ESP-MD5-3DES
</span><span class='line'>
</span><span class='line'># Create the IPSEC VPN (notice the bind-interface st0.0)
</span><span class='line'>set security ipsec vpn IPSEC-VPN-CHI bind-interface st0.0
</span><span class='line'>set security ipsec vpn IPSEC-VPN-CHI ike gateway IKE-GATEWAY-CHI
</span><span class='line'>set security ipsec vpn IPSEC-VPN-CHI ike ipsec-policy IKE-POLICY-CHI
</span><span class='line'>set security ipsec vpn IPSEC-VPN-CHI establish-tunnels immediately
</span><span class='line'>
</span><span class='line'># If you have a PAT out the gateway interface then you want to exclude the VPN traffic from being NAT'd
</span><span class='line'>set security nat source rule-set NAT-INTERFACE rule NO-NAT match source-address 192.168.11.0/24
</span><span class='line'>set security nat source rule-set NAT-INTERFACE rule NO-NAT match destination-address 172.16.100.0/24
</span><span class='line'>set security nat source rule-set NAT-INTERFACE rule NO-NAT then source-nat off</span></code></pre></td></tr></table></div></figure>


<h2>Policy Based VPN</h2>

<p>In this type of tunnel, we will define the traffic for the tunnel in a policy. Any traffic that matches the policy will attempt to go over the tunnel. We&rsquo;ll build this tunnel to our peer 22.22.22.22. This peer must also be configured for policy based VPN.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'># Create the IKE proposal
</span><span class='line'>set security ike proposal IKE-SHA-AES128-DH1 authentication-method pre-shared-keys
</span><span class='line'>set security ike proposal IKE-SHA-AES128-DH1 dh-group group2
</span><span class='line'>set security ike proposal IKE-SHA-AES128-DH1 encryption-algorithm aes-128-cbc
</span><span class='line'>set security ike proposal IKE-SHA-AES128-DH1 authentication algorithm sha1
</span><span class='line'>set security ike proposal IKE-SHA-AES128-DH1 lifetime-seconds 86400
</span><span class='line'>
</span><span class='line'># Create the IKE policy
</span><span class='line'>set security ike policy IKE-POLICY-HQ mode main
</span><span class='line'>set security ike policy IKE-POLICY-HQ proposals IKE-SHA-AES128-DH1
</span><span class='line'>set security ike policy IKE-POLICY-HQ pre-shared-key ascii-text s3kreTKey
</span><span class='line'>
</span><span class='line'># Create an IKE gateway
</span><span class='line'>set security ike gateway IKE-GATEWAY-HQ ike-policy IKE-POLICY-HQ
</span><span class='line'>set security ike gateway IKE-GATEWAY-HQ address 22.22.22.22
</span><span class='line'>set security ike gateway IKE-GATEWAY-HQ external-interface ge-0/0/0.0
</span><span class='line'>
</span><span class='line'># Create an IPSec proposal/transform set
</span><span class='line'>set security ipsec proposal IPSEC-SHA-AES128-ESP encryption-algorithm aes-128-cbc
</span><span class='line'>set security ipsec proposal IPSEC-SHA-AES128-ESP authentication-algorithm hmac-sha1-96
</span><span class='line'>set security ipsec proposal IPSEC-SHA-AES128-ESP protocol esp
</span><span class='line'>set security ipsec proposal IPSEC-SHA-AES128-ESP lifetime-seconds 3600
</span><span class='line'>
</span><span class='line'># Create a IPSec policy
</span><span class='line'>set security ipsec policy VPN-POLICY-HQ proposals IPSEC-SHA-AES128-ESP
</span><span class='line'>
</span><span class='line'># Create the IPSec VPN
</span><span class='line'>set security ipsec vpn VPN-HQ ike gateway IKE-GATEWAY-HQ
</span><span class='line'>set security ipsec vpn VPN-HQ ike ipsec-policy VPN-POLICY-HQ
</span><span class='line'>
</span><span class='line'># Add some networks into the address book
</span><span class='line'>set security zones security-zone OUTSIDE address-book address NET-REMOTE-VPN 172.16.22.0/24
</span><span class='line'>set security zones security-zone INSIDE address-book address NET-LOCAL 192.168.11.0/24
</span><span class='line'>
</span><span class='line'># Create the policies to define the interesting traffic
</span><span class='line'>set security policies from-zone INSIDE to-zone OUTSIDE policy VPN-POLICY-HQ-OUT match source-address NET-LOCAL
</span><span class='line'>set security policies from-zone INSIDE to-zone OUTSIDE policy VPN-POLICY-HQ-OUT match destination-address NET-REMOTE-VPN
</span><span class='line'>set security policies from-zone INSIDE to-zone OUTSIDE policy VPN-POLICY-HQ-OUT match application any
</span><span class='line'>set security policies from-zone INSIDE to-zone OUTSIDE policy VPN-POLICY-HQ-OUT then permit tunnel ipsec-vpn VPN-HQ
</span><span class='line'>set security policies from-zone INSIDE to-zone OUTSIDE policy VPN-POLICY-HQ-OUT then permit tunnel pair-policy VPN-POLICY-HQ-IN
</span><span class='line'>
</span><span class='line'>set security policies from-zone OUTSIDE to-zone INSIDE policy VPN-POLICY-HQ-IN match source-address NET-REMOTE-VPN
</span><span class='line'>set security policies from-zone OUTSIDE to-zone INSIDE policy VPN-POLICY-HQ-IN match destination-address NET-LOCAL
</span><span class='line'>set security policies from-zone OUTSIDE to-zone INSIDE policy VPN-POLICY-HQ-IN match application any
</span><span class='line'>set security policies from-zone OUTSIDE to-zone INSIDE policy VPN-POLICY-HQ-IN then permit tunnel ipsec-vpn VPN-HQ
</span><span class='line'>set security policies from-zone OUTSIDE to-zone INSIDE policy VPN-POLICY-HQ-IN then permit tunnel pair-policy VPN-POLICY-HQ-OUT
</span><span class='line'>
</span><span class='line'># If you have a PAT out the gateway interface then you want to exclude the VPN traffic from being NAT'd
</span><span class='line'>set security nat source rule-set NAT-INTERFACE rule NO-NAT match source-address 192.168.11.0/24
</span><span class='line'>set security nat source rule-set NAT-INTERFACE rule NO-NAT match destination-address 172.16.22.0/24
</span><span class='line'>set security nat source rule-set NAT-INTERFACE rule NO-NAT then source-nat off
</span><span class='line'>
</span><span class='line'># My config already had a rule in the rule-set. So I had to move the new rule above the old rule so it processes the no nat first.
</span><span class='line'>insert source rule-set NAT-INTERFACE rule NO-NAT before rule RULE-NAME</span></code></pre></td></tr></table></div></figure>


<h3>Troubleshooting</h3>

<p>Enable additional logging to see possibly why a VPN isn&rsquo;t forming:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>set system syslog file kmd-logs daemon info
</span><span class='line'>set system syslog file kmd-logs match KMD</span></code></pre></td></tr></table></div></figure>


<p>Then do <code>show log kdm-logs</code> and you may be able to see at what part the tunnel is failing at.</p>

<p><strong>Traceoptions</strong> is like Cisco&rsquo;s debug commands. You can enable this to see even more logs.</p>

<p>IKE Traceoptions</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>set security ike traceoptions flags ike
</span><span class='line'>set security ike traceoptions file vpn-ike</span></code></pre></td></tr></table></div></figure>


<p>Now do <code>show log vpn-ike</code> to see more information on the entire IKE process.</p>

<p>Show commands:</p>

<p><code>show security ike associations</code></p>

<p><code>show security ipsec statistics</code></p>

<h3>Additional Resources</h3>

<p>Troubleshoot a VPN tunnel that is down with this guide:</p>

<p><a href="https://kb.juniper.net/InfoCenter/index?page=content&amp;id=KB10100&amp;actp=search">https://kb.juniper.net/InfoCenter/index?page=content&amp;id=KB10100&amp;actp=search</a></p>

<p>Here is a link to help you build the VPN configuration:</p>

<p><a href="https://www.juniper.net/customers/support/configtools/vpnconfig.html">https://www.juniper.net/customers/support/configtools/vpnconfig.html</a></p>

<p>Reference guide for policy based VPNs:</p>

<p><a href="http://www.juniper.net/techpubs/en_US/junos/topics/example/policy-based-vpn-using-j-series-srx-series-device-configuring.html">http://www.juniper.net/techpubs/en_US/junos/topics/example/policy-based-vpn-using-j-series-srx-series-device-configuring.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Juniper SRX - ALG and Screen Options]]></title>
    <link href="https://www.tunnelsup.com/juniper-srx-alg-and-screen-options/"/>
    <updated>2017-03-03T20:12:00-08:00</updated>
    <id>https://www.tunnelsup.com/juniper-srx-alg-and-screen-options</id>
    <content type="html"><![CDATA[<p>What is ALG? What are screen options? When would I use this and why? This post will give you an introduction to these terms.</p>

<p>Screen Options and ALGs are two important security features of an SRX that detect and block abnormal traffic or attacks.</p>

<h2>ALG Application-Level Gateway</h2>

<p>The application-level gateway (ALG) feature of Juniper SRX devices acts as a fixup to certain protocols that need help getting through the firewall. Since the firewall is stateful and restrictive by default, this causes certain protocols to not get through. Think about FTP, where the initial connection comes in on port 21 but then data is transmitted on port 20. Without ALG you would have to open port 20 and 21. With Juniper SRX you can configure a FTP ALG which will know that when a session is built on port 21, build the session for port 20 and 21. This way you only have to open port 21. This is similar to fixups or inspects on a Cisco ASA.</p>

<p>You can see which ALGs are available and enabled with this command:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>srx&gt; show security alg status
</span><span class='line'>ALG Status :
</span><span class='line'>  DNS      : Enabled
</span><span class='line'>  FTP      : Enabled
</span><span class='line'>  H323     : Enabled
</span><span class='line'>  MGCP     : Enabled
</span><span class='line'>  MSRPC    : Enabled
</span><span class='line'>  PPTP     : Enabled
</span><span class='line'>  RSH      : Enabled
</span><span class='line'>  RTSP     : Enabled
</span><span class='line'>  SCCP     : Enabled
</span><span class='line'>  SIP      : Enabled
</span><span class='line'>  SQL      : Enabled
</span><span class='line'>  SUNRPC   : Enabled
</span><span class='line'>  TALK     : Enabled
</span><span class='line'>  TFTP     : Enabled</span></code></pre></td></tr></table></div></figure>


<p>There are a few ALGs enabled by default. To see these (an configuration examples), use this hidden command:</p>

<p><code>show configuration groups junos-defaults security alg</code></p>

<p>To create new ALGs put them in the <code>edit security alg</code> section of the config.</p>

<p>To apply a new ALG, add it to the application in the <code>edit application application</code> section of the config.</p>

<p>Once the ALG is applied, adjust your policy to use that application. You can then check if your policy is using an ALG with this command:</p>

<p><code>show security policies detail</code></p>

<p>You can see if a session is being hit by an ALG with <code>show security flow session</code>, and if the flow is being impacted by an ALG it will be listed there.</p>

<p>To see a more detailed explanation of what each ALG does, check here: <a href="http://www.juniper.net/documentation/en_US/junos12.1x44/information-products/pathway-pages/security/security-algs-index.html">http://www.juniper.net/documentation/en_US/junos12.1x44/information-products/pathway-pages/security/security-algs-index.html</a></p>

<h2>Screen Options</h2>

<p>Screen options are configurations applied to the firewall which act as a mini-IDS (intrusion detection system). The SRX can detect well established and known attacks such as DoS attacks, Teardrop attacks, fragmented ICMP packets, and more. There are about 30 screen options available. They are:</p>

<ul>
<li><strong>icmp/flood</strong>                       Configure icmp flood ids option</li>
<li><strong>icmp/fragment</strong>                    Enable ICMP fragment ids option</li>
<li><strong>icmp/ip-sweep</strong>                    Configure ip sweep ids option</li>
<li><strong>icmp/large</strong>                       Enable large ICMP packet (size > 1024) ids option</li>
<li><strong>icmp/ping-death</strong>                  Enable ping of death ids option</li>
<li><strong>ip/bad-option</strong>                  Enable ip with bad option ids option</li>
<li><strong>ip/block-frag</strong>                  Enable ip fragment blocking ids option</li>
<li><strong>ip/loose-source-route-option</strong>    Enable ip with loose source route ids option</li>
<li><strong>ip/record-route-option</strong>         Enable ip with record route option ids option</li>
<li><strong>ip/security-option</strong>             Enable ip with security option ids option</li>
<li><strong>ip/source-route-option</strong>         Enable ip source route ids option</li>
<li><strong>ip/spoofing</strong>                    Enable IP address spoofing ids option</li>
<li><strong>ip/stream-option</strong>               Enable ip with stream option ids option</li>
<li><strong>ip/strict-source-route-option</strong>    Enable ip with strict source route ids option</li>
<li><strong>ip/tear-drop</strong>                   Enable tear drop ids option</li>
<li><strong>ip/timestamp-option</strong>            Enable ip with timestamp option ids option</li>
<li><strong>ip/unknown-protocol</strong>            Configure unknown protocol ids option</li>
<li><strong>limit-session</strong>                    Configure connection limits</li>
<li><strong>tcp/fin-no-ack</strong>                  Enable Fin bit with no ACK bit ids option</li>
<li><strong>tcp/land</strong>                        Enable land attack ids option</li>
<li><strong>tcp/port-scan</strong>                   Configure port scan ids option</li>
<li><strong>tcp/syn-ack-ack-proxy</strong>           Enable syn-ack-ack proxy ids option</li>
<li><strong>tcp/syn-fin</strong>                     Enable SYN and FIN bits set attack ids option</li>
<li><strong>tcp/syn-flood</strong>                   Enable SYN flood ids option</li>
<li><strong>tcp/syn-frag</strong>                    Enable SYN fragment ids option</li>
<li><strong>tcp/tcp-no-flag</strong>                 Enable TCP packet without flag ids option</li>
<li><strong>tcp/winnuke</strong>                     Enable winnuke attack ids option</li>
<li><strong>udp/flood</strong>                       Configure udp flood ids option</li>
</ul>


<p>Some of these screen options are configured by default. To see which screen options are configured, look at the config here:</p>

<p><code>show configuration security screen</code></p>

<p>You can then see if the screen option is applied anywhere by doing:</p>

<p><code>show security zones</code></p>

<p>If it&rsquo;s applied you&rsquo;ll see it say <strong>Screen:</strong> and the screen policy name.</p>

<h4>Configuring Screen Options</h4>

<p>The best practice is to apply the screen to the least trusted zone. Often it is applied to the untrust zone. Traffic coming <strong>in to</strong> the zone with the screen applied, will be inspected by the screen options. Traffic going out of the zone will not be inspected by the screen.</p>

<p>Let&rsquo;s configure a new screen option to limit the number of connection to a server to only be <strong>1</strong> connection. To configure a new screen option and policy:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>set security screen ids-option UNTRUST-SCREEN limit-session destination-ip-based 1
</span><span class='line'>set security zones security-zone UNTRUST screen UNTRUST-SCREEN</span></code></pre></td></tr></table></div></figure>


<p>This creates the screen policy called &ldquo;UNTRUST-SCREEN&rdquo; which says only allow one connection inbound through the screen.</p>

<p>Then the screen policy is applied to the UNTRUST interface.</p>

<p>Once this is committed you can check the screen status with this command:</p>

<p><code>show security screen statistics zone UNTRUST</code></p>

<p>To check logs you can look at the following output:</p>

<p><code>show log messages | match RT_SCREEN</code></p>

<p>Traffic that hits the screen will show up in the messages log with this string.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASA5506x Fits In A 5505 Rack Mount]]></title>
    <link href="https://www.tunnelsup.com/asa5505x-fits-in-a-5505-rack-mount/"/>
    <updated>2016-11-01T22:30:00-07:00</updated>
    <id>https://www.tunnelsup.com/asa5505x-fits-in-a-5505-rack-mount</id>
    <content type="html"><![CDATA[<p>The rack mount kits for a Cisco ASA 5506x (Part number ASA-5506-RACK-MNT=) are going for over $250! That&rsquo;s almost as much as the firewall itself! This is ridiculously high.</p>

<p>But don&rsquo;t panic! You can get an older ASA 5505 rack mount kit and the 5506x will fit inside it. The older ASA 5505 mounts go for $60 or less and seem to be ok. Here are some pics from a recent swap I did.</p>

<p>ASA 5505 in an 5505 rack mount.
<img src="https://www.tunnelsup.com/images/asarack1.jpg"></p>

<p>ASA 5506x in a 5505 rack mount.
<img src="https://www.tunnelsup.com/images/asarack2.jpg"></p>

<p>ASA 5506x in a 5505 rack mount.
<img src="https://www.tunnelsup.com/images/asarack3.jpg"></p>

<p>The one problem here is that the 5506-X is longer than the 5505. This means you may have to secure it using some zip ties or something if you don&rsquo;t want it to slide around every time you put a cable in. In my case I added a few pieces of tape to keep it from moving and it worked great.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using The Built-In macOS FTP, TFTP, SFTP, and HTTP Servers]]></title>
    <link href="https://www.tunnelsup.com/using-the-built-in-macos-ftp-tftp-sftp-and-http-servers/"/>
    <updated>2016-10-21T22:02:00-07:00</updated>
    <id>https://www.tunnelsup.com/using-the-built-in-macos-ftp-tftp-sftp-and-http-servers</id>
    <content type="html"><![CDATA[<p>The macOS and OSX operating systems come with built in FTP, TFTP, SFTP, and HTTP servers. Here is how to enable them and use them.</p>

<h2>FTP Server</h2>

<p>To start an FTP server use this terminal command:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>sudo -s launchctl load -w /System/Library/LaunchDaemons/ftp.plist</span></code></pre></td></tr></table></div></figure>


<p>Users will need to authenticate to the macOS system using standard logins that are already on the macOS. When someone logs in, they will arrive in <code>/Users/&lt;username&gt;/</code>.</p>

<p>To stop the FTP server, run the following:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>sudo launchctl unload -F /System/Library/LaunchDaemons/ftp.plist</span></code></pre></td></tr></table></div></figure>


<h2>TFTP Server</h2>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>sudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist
</span><span class='line'>sudo launchctl start com.apple.tftpd</span></code></pre></td></tr></table></div></figure>


<p>The directory that serves files is <code>/private/tftpboot</code>.</p>

<p>To stop the TFTP server, either reboot or use this command:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>sudo launchctl unload -F /System/Library/LaunchDaemons/tftp.plist</span></code></pre></td></tr></table></div></figure>


<h2>SFTP Server</h2>

<p>This one is different. Go to system preferences then <code>Sharing</code>. Check the box to enabe <code>Remote Login</code>. Once this is done, other people will be able to ssh and sftp to your macOS system.</p>

<h2>HTTP Server</h2>

<p>Apache comes bundled with macOS. To start it, run this command.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>sudo apachectl start</span></code></pre></td></tr></table></div></figure>


<p>By default the files will be served from <code>/Library/WebServer/Documents</code>.</p>

<p>To disable the server, either reboot or do this command:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>sudo apachectl stop</span></code></pre></td></tr></table></div></figure>


<h2>Checking Status</h2>

<p>To check to see what&rsquo;s running, run the command:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>netstat -an | grep LISTEN</span></code></pre></td></tr></table></div></figure>


<p>This will show you which ports are open on your macOS. For example if you have Apache running, you will see the following:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>tcp46      0      0  *.80                   *.*                    LISTEN</span></code></pre></td></tr></table></div></figure>


<ul>
<li>HTTP = TCP 80</li>
<li>FTP = TCP 21</li>
<li>SSH = TCP 22</li>
<li>SFTP = TCP 22</li>
<li>TFTP = UDP 69</li>
</ul>


<p>Note that TFTP is on UDP and won&rsquo;t say listen. Just run <code>netstat -an | grep 69</code> to find if it&rsquo;s running.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Differences between spam and phishing emails]]></title>
    <link href="https://www.tunnelsup.com/differences-between-spam-and-phishing-emails/"/>
    <updated>2016-10-15T14:47:00-07:00</updated>
    <id>https://www.tunnelsup.com/differences-between-spam-and-phishing-emails</id>
    <content type="html"><![CDATA[<p>Sometimes people send me spam mail and tell me they are being phished. Sometimes people ignore phishing emails thinking they are spam. Let&rsquo;s try to understand the differences of the two.</p>

<h2>Definitions</h2>

<p>Spam is:</p>

<blockquote><p>Unsolicited e-mail, often of a commercial nature, sent indiscriminately to multiple mailing lists, individuals, or newsgroups; junk e-mail.</p></blockquote>

<p>Phishing is:</p>

<blockquote><p>To request confidential information over the Internet under false pretenses in order to fraudulently obtain credit card numbers, passwords, or other personal data.</p></blockquote>

<h2>Spam Vs Phishing</h2>

<p>Here are some key differences.</p>

<ul>
<li>Phishing emails are usually targeted to a person. They will often have the person&rsquo;s name already in the email. Spam is more likely to be less personal.</li>
<li>Phishing usually has a sense of urgency. There may be language like &ldquo;free to first 50 people&rdquo;. Spam may not be so immediate.</li>
<li>Phishing usually is trying to get you to click a malicious link or reply to an email (instead of making a phone call).</li>
<li>Phishing links often contain malware or are intended to trick you. Spam links are often to legitimate services and websites that want to sell you a product.</li>
<li>Phishing emails are sent much less frequent than spam.</li>
<li>Phishing emails often are impersonating another company or someone you know. For instance an email that looks like it&rsquo;s from your bank but really not. Spam emails usually don&rsquo;t impersonate or try to trick you into thinking they are someone else.</li>
</ul>


<h2>Samples</h2>

<h4>Sample Spam Email</h4>

<p><img src="https://www.tunnelsup.com/images/spamphish2.png"></p>

<p>First of all this email isn&rsquo;t even to me, it&rsquo;s to someone else and I&rsquo;m in the bcc field. This email looks like it can be sent to thousands of people and not just me. Lastly, the link does in fact take you to a dating site so it&rsquo;s really just an advertisement.</p>

<h4>Sample Phishing Email</h4>

<p><img src="https://www.tunnelsup.com/images/spamphish1.png"></p>

<p>This email looks like it came from Google and I have a new message. This makes it feel like it&rsquo;s directed only to me. But looking at the from address, you can see it&rsquo;s not from Google. Hovering over the links all show that it doesn&rsquo;t take you to a Google website either.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create SSH Tunnels]]></title>
    <link href="https://www.tunnelsup.com/how-to-create-ssh-tunnels/"/>
    <updated>2016-10-09T16:38:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-create-ssh-tunnels</id>
    <content type="html"><![CDATA[<p>Besides sending ssh data, the ssh protocol can tunnel other traffic between two hosts. The most common tunnels are remote and local. Knowing how to spin up an ssh tunnel can help you reach otherwise inaccessible networks and systems.</p>

<p>These examples work from a linux prompt or a macOS terminal. It&rsquo;s possible to do the same thing in Windows using applications like putty or mobaXterm.</p>

<h2>Local ssh Port Forwarding</h2>

<p>You can use a local ssh tunnel when you want to get to a resource that you can&rsquo;t get to directly, but a ssh server that you have access to can. Here are some scenarios.</p>

<h4>Proxy to Remote Server</h4>

<p><img src="https://www.tunnelsup.com/images/ssh-local2.png">
In the image above, the blue host cannot reach <code>http://192.168.0.3</code> but can ssh to 192.168.0.2. The following ssh command executed on the <strong>blue host</strong> will allow the blue host to reach the red host.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>ssh -L 8080:192.168.0.3:80 reduser@192.168.0.2</span></code></pre></td></tr></table></div></figure>


<p>Now the blue host can open a browser, and go to <code>http://localhost:8080</code> and be presented with the webpage hosted on 192.168.0.3.</p>

<h4>Local Port Forward</h4>

<p><img src="https://www.tunnelsup.com/images/ssh-local1.png">
In the image above, the blue host wants to connect to the red host on port 80 but there&rsquo;s a firewall in between which is denying this. Because the blue host can ssh to the red host, we can create a local port forwarding ssh tunnel to access that port.</p>

<p>The command on the blue host will be:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>ssh -L 8080:192.168.0.2:80 reduser@192.168.0.2</span></code></pre></td></tr></table></div></figure>


<p>Now when the blue host opens a browser and goes to <code>http://localhost:8080</code> they will be able to see whatever the red server has at port 80.</p>

<h4>Local Port Forwarding Syntax</h4>

<p>This syntax to create a local ssh port forwarding tunnel is this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>ssh -L &lt;LPORT&gt;:&lt;RHOST&gt;:&lt;RPORT&gt; &lt;GATEWAY&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Remote SSH Port Forwarding</h2>

<p>In this scenario we are creating a reverse ssh tunnel. Here we can initiate an ssh tunnel in one direction, then use that tunnel to create an ssh tunnel back the other way. This may be useful for when you drop a drone computer inside a network and want it to &ldquo;phone home&rdquo;. Then when it phones home, you can connect to it through the established ssh tunnel.</p>

<p><img src="https://www.tunnelsup.com/images/ssh-remote.png">
We are on the green host and want to ssh to the blue host. However, the firewall blocks this connection directly. Because the blue host can ssh to the green host, we can connect using that, and when the green host wants to ssh back to the blue host, it can ride along this previously established tunnel.</p>

<p>Blue host initiates ssh tunnel like this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>ssh -R 2222:localhost:22 greenuser@192.168.0.2</span></code></pre></td></tr></table></div></figure>


<p>This opens port 2222 on the green host, which is then port forwarding that to port 22 on the blue host. So if the green host were to ssh to itself on port 2222 it would then reach the blue host.</p>

<p>Green host can now ssh to blue host like this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>ssh -p 2222 blueuser@localhost</span></code></pre></td></tr></table></div></figure>


<h2>Using the -N Option</h2>

<p>When using ssh, you can specify the <code>-N</code> flag which tells ssh you don&rsquo;t need to send any commands over the ssh connection when it&rsquo;s established. This option is often used when making tunnels since often we don&rsquo;t need to actually get a prompt.</p>

<h2>Autossh</h2>

<p>The autossh command is used to add persistence to your tunnels. The job it has is to verify your ssh connection is up, and if it&rsquo;s not, create it.</p>

<p>Here is an autossh command which you may recognize.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>autossh -N -i /home/blueuser/.ssh/id_rsa -R 2222:localhost:22 greenuser@192.168.0.3</span></code></pre></td></tr></table></div></figure>


<p>The <code>-i /home/blueuser/.ssh/id_rsa</code> option says to use a certificate to authenticate this ssh connection. Check out this post to <a href="https://www.tunnelsup.com/ssh-without-password/">learn more about ssh certificates</a>.</p>

<p>Now when your tunnel goes down it will automatically try to reconnect and keep trying until it is successful. To make it persistent through a reboot, add the ssh command as a cron job.</p>

<h2>Related Articles</h2>

<ul>
<li><a href="https://www.tunnelsup.com/how-to-ssh-like-a-pro/">How to ssh like a pro</a></li>
<li><a href="https://www.tunnelsup.com/ssh-without-password/">How to ssh without a password</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading ESXi to 5.5 and 6.0 Using a Bootable USB drive and macOS]]></title>
    <link href="https://www.tunnelsup.com/upgrading-esxi-using-a-bootable-usb-drive-and-macos/"/>
    <updated>2016-10-04T20:17:00-07:00</updated>
    <id>https://www.tunnelsup.com/upgrading-esxi-using-a-bootable-usb-drive-and-macos</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not a VMWare expert so when it came time to upgrade my personal free ESXi host it took me a long time to figure it out. I didn&rsquo;t have any fancy tools or paid licenses to assist which meant it had to be done through a bootable USB drive. I had a really hard time figuring out what to do and then creating a bootable ESXi installation USB and wanted to document this for anyone else struggling.</p>

<h2>Download ESXi</h2>

<p>Even if you&rsquo;re doing an upgrade, you need to download the following:</p>

<p><strong>ESXi ISO image (Includes VMware Tools)</strong></p>

<p><a href="https://my.vmware.com/en/web/vmware/evalcenter?p=free-esxi">https://my.vmware.com/en/web/vmware/evalcenter?p=free-esxi</a></p>

<p>This is a free download from VMWare and on the same page is where your free license key is. Save that since you&rsquo;ll need it after the upgrade. It changes with each upgrade.</p>

<h2>Format the USB drive</h2>

<p>First determine which <code>/dev/driveN</code> your USB drive is plugged in to. You can simply do an <code>ls /dev/disk*</code> before and then again after you plug in the USB drive.</p>

<p>Next, you can format the drive using <code>Disk Utility</code> application that comes with macOS. When you format it, make sure to set the file system to FAT, and if you have the option, write it to the master boot record.</p>

<h2>Create a Bootable USB</h2>

<p>For some reason this part tripped me up a lot. Using a Mac running OSX I was able to get this done using UNetbootin.</p>

<h4><a href="https://unetbootin.github.io">Download UNetbootin</a></h4>

<h4>Choose the ISO Image and USB drive</h4>

<p><img class="center" src="https://www.tunnelsup.com/images/esxi-boot1.png"></p>

<h4>Overwrite menu.c32</h4>

<p>Make sure to choose yes on this option.
<img class="center" src="https://www.tunnelsup.com/images/esxi-boot2.png"></p>

<h2>Now Upgrade!</h2>

<p>Power down the ESXi host entirely, plug in a monitor and keyboard, and boot to the USB drive you just made. You&rsquo;ll have the option to install fresh or upgrade an existing ESXi installation.</p>

<p>The rest of this process is described in this video. Even though it is a video for 5.5 it is exactly the same for 6.0.</p>

<p><a href="https://www.youtube.com/watch?v=og6PeyXPQ8A">https://www.youtube.com/watch?v=og6PeyXPQ8A</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to remove meta data from a Visio document]]></title>
    <link href="https://www.tunnelsup.com/how-to-remove-meta-data-from-a-visio-document/"/>
    <updated>2016-10-02T12:59:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-remove-meta-data-from-a-visio-document</id>
    <content type="html"><![CDATA[<p>If you create a Visio diagram and either save it or convert it to a PDF, it will contain personal meta data in it. It will try to insert your name and company name.  This is sort of like exif data on an image. It&rsquo;s a good idea to sanitize and remove all personal information before sharing it with anyone. To remove this personal data from a Visio document do the following.</p>

<h2>1. Click File > Info > Remove Personal Information</h2>

<p><img src="https://www.tunnelsup.com/images/visio-removemeta1.PNG"></p>

<h2>2. Confirm the Removal</h2>

<p><img src="https://www.tunnelsup.com/images/visio-removemeta2.PNG"></p>

<p>Now when the document is saved and when a PDF is generated, the personal information will not be in the document.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to remove meta data from a PDF document]]></title>
    <link href="https://www.tunnelsup.com/how-to-remove-meta-data-from-a-pdf-document/"/>
    <updated>2016-09-29T23:02:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-remove-meta-data-from-a-pdf-document</id>
    <content type="html"><![CDATA[<p>Some PDF documents contain meta data which may contain the user&rsquo;s name that made it, the company they work for, their address, and more. This is sort of like exif data on an image. It&rsquo;s a good idea to sanitize any PDF before posting it to the Internet. To remove this personal data from a PDF do the following.</p>

<ol>
<li><p>Open Document in Adobe Acrobat
You&rsquo;ll need Acrobat and not simply Acrobat Reader. This tutorial used Adobe Acrobat XI.</p></li>
<li><p>Click the Tools Button
On the top right corner of the PDF click the Tools button.<br>
<img src="https://www.tunnelsup.com/images/pdf-meta1.PNG"></p></li>
<li><p>Click Sanitize
At the bottom of the tools is a Protection menu, expand it, and find the sanitize option.<br>
<img src="https://www.tunnelsup.com/images/pdf-meta2.PNG"></p></li>
<li><p>Confirm Sanitization
A popup box shows up and lets you verify what will be sanitized. <br>
<img src="https://www.tunnelsup.com/images/pdf-meta3.PNG"></p></li>
</ol>


<p>You&rsquo;ll then be prompted to save the sanitized document.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cisco ASA command to show listening ports]]></title>
    <link href="https://www.tunnelsup.com/cisco-asa-command-to-show-listening-ports/"/>
    <updated>2016-09-29T15:05:00-07:00</updated>
    <id>https://www.tunnelsup.com/cisco-asa-command-to-show-listening-ports</id>
    <content type="html"><![CDATA[<p>Do you wish there was a <code>netstat</code> command for a Cisco ASA? Are you looking to see what ports the ASA has open and is listening on? Try this command:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>ASA5506# sh asp table socket
</span><span class='line'>
</span><span class='line'>Protocol  Socket    State      Local Address        Foreign Address
</span><span class='line'>SSL       0001ebf8  LISTEN     172.16.3.1:443       0.0.0.0:*
</span><span class='line'>TCP       000216f8  LISTEN     172.16.3.1:22        0.0.0.0:*
</span><span class='line'>TCP       370c1d68  LISTEN     99.99.99.99:22       0.0.0.0:*
</span><span class='line'>TCP       3712d678  ESTAB      172.16.3.1:22        172.16.2.3:50233</span></code></pre></td></tr></table></div></figure>


<p>This command displays all of the ports that are open and established on the ASA.</p>

<p>The <code>state</code> indicates whether the port is listening or established.</p>

<p>The <code>local address</code> says which IP it&rsquo;s listening on. In the example above, 99.99.99.99 is the outside interface and the 172.16.3.1 is the inside interface.</p>

<p>The <code>foreign address</code> will show up when someone connects to that port. In this case I was ssh&rsquo;d into the firewall coming from 172.16.2.3.</p>

<p>The output above should be a direct reflection of the <code>ssh</code>, <code>telnet</code>, and <code>http</code> commands in the ASA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metasploit Cheat Sheet and Video]]></title>
    <link href="https://www.tunnelsup.com/metasploit-cheat-sheet/"/>
    <updated>2016-09-28T10:41:00-07:00</updated>
    <id>https://www.tunnelsup.com/metasploit-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Need a quick handy reference guide for Metasploit? I&rsquo;ve put together a bunch of the most common commands in a cheat sheet style for quick reference.</p>

<p><img class="center" src="https://www.tunnelsup.com/images/Metasploit.png">
Download: <a href="https://www.tunnelsup.com/images/Metasploit.png">[PNG Image]</a> - <a href="https://www.tunnelsup.com/images/Metasploit-CheatSheet.pdf">[PDF File]</a></p>

<h2>Video</h2>

<p>To get started with the cheat sheet I have made an instructional video on using Metasploit.</p>

<iframe width="770" height="460" src="https://www.youtube.com/embed/Y8IwBbJrny4" frameborder="0" allowfullscreen></iframe>


<p>If you find any problems with this please leave a comment below and I will update the guide periodically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSX How to Lock the Screen]]></title>
    <link href="https://www.tunnelsup.com/mac-osx-how-to-lock-the-screen/"/>
    <updated>2016-09-23T18:18:00-07:00</updated>
    <id>https://www.tunnelsup.com/mac-osx-how-to-lock-the-screen</id>
    <content type="html"><![CDATA[<p>To lock the screen of a Macbook or Mac running OSX use the following key combination:</p>

<p><code>&lt;CONTROL&gt;</code> + <code>&lt;SHIFT&gt;</code> + <code>&lt;POWER&gt;</code></p>

<p>In order for the screen to be password protected follow these steps:</p>

<h3>1. Go to System Preferences</h3>

<p><img src="https://www.tunnelsup.com/images/mac-set-ip1.png" alt="Lock Screen Mac OSX" /><br></p>

<h3>2. Go to Security and Privacy</h3>

<p><img src="https://www.tunnelsup.com/images/lock1.png" alt="Lock Screen Mac OSX" /><br></p>

<h3>3. Check Require Password Immediately After Sleep</h3>

<p><img src="https://www.tunnelsup.com/images/lock2.png" alt="Lock Screen Mac OSX" /><br></p>

<p>Now when you lock the screen it will ask for a password to unlock it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set a static IP on Mac OSX]]></title>
    <link href="https://www.tunnelsup.com/how-to-set-a-static-ip-on-mac-osx/"/>
    <updated>2016-09-22T21:28:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-set-a-static-ip-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Are you using a Macbook Pro or Macbook Air and want to know how to show the change the interface to use a static IP? Follow the steps below to complete this.</p>

<h2>1. Go to Preferences</h2>

<p>Click the Apple icon in the top left corner and click System Preferences.</p>

<p><img src="https://www.tunnelsup.com/images/mac-set-ip1.png" alt="Static IP" /><br></p>

<h2>2. Go to Network Settings</h2>

<p>Now find the <code>Network</code> icon and click it.</p>

<p><img src="https://www.tunnelsup.com/images/mac-set-ip2.png" alt="Static IP" /><br></p>

<h2>3. Change the Settings</h2>

<p>Find the interface you want to change the settings on and click it. Then select the interface settings you want to us. To set a static IP select the options <code>Manually</code> and fill in the fields. You can also set it to be DHCP where you&rsquo;ll be assigned an address automatically by a router.
<img src="https://www.tunnelsup.com/images/mac-set-ip3.png" alt="Static IP" /><br></p>

<p>If you need to change the DNS settings, click <code>advanced</code>.</p>

<p>Once done click apply and your settings should be applied right away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to see the routing table on Mac OSX]]></title>
    <link href="https://www.tunnelsup.com/how-to-see-the-routing-table-on-mac-osx/"/>
    <updated>2016-09-20T20:39:00-07:00</updated>
    <id>https://www.tunnelsup.com/how-to-see-the-routing-table-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Do you have a Macbook Pro or Macbook Air and want to know how to show the routes it has in the routing table? Are you looking for the Windows command <strong>route print</strong> equivalent in OSX? This post is for you.</p>

<h2>Show Routes</h2>

<p>This is the command to show routes on a Mac OSX:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>netstat -rn</span></code></pre></td></tr></table></div></figure>


<p>The <code>-r</code> flag means to show routes.</p>

<p>The <code>-n</code> flag means to not resolve IPs to hostnames.</p>

<p>Here is an example output of the command:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>$ netstat -rn
</span><span class='line'>Routing tables
</span><span class='line'>
</span><span class='line'>Internet:
</span><span class='line'>Destination        Gateway            Flags        Refs      Use   Netif Expire
</span><span class='line'>default            192.168.20.1       UGSc           39        0     en0
</span><span class='line'>127.0.0.1          127.0.0.1          UH              3    11132     lo0
</span><span class='line'>192.168.20/24      link#4             UCS             8        0     en0
</span><span class='line'>192.168.20.1       0:1f:ca:88:96:8c   UHLWIir        40       22     en0   1025
</span><span class='line'>192.168.20.255     ff:ff:ff:ff:ff:ff  UHLWbI          0        8     en0</span></code></pre></td></tr></table></div></figure>


<p>In the case above, the default gateway of this Mac is 192.168.20.1. Meaning all routes are pointing to that system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using For and While Loops in Python]]></title>
    <link href="https://www.tunnelsup.com/using-for-and-while-loops-in-python/"/>
    <updated>2016-09-20T17:48:00-07:00</updated>
    <id>https://www.tunnelsup.com/using-for-and-while-loops-in-python</id>
    <content type="html"><![CDATA[<p>Here are some tools to use to do loops in the Python language.</p>

<h2>The While Loop</h2>

<p>The <code>while</code> statement will continually cycle through the block of code until the condition is no longer true.</p>

<p>A forever loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&#39;This will never end!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use a while loop to cycle through something 5 times, you could use this code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">repeat</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="n">repeat</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Loop number: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">repeat</span><span class="p">))</span>
</span><span class='line'>    <span class="n">repeat</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Continue and Break</h3>

<p>The <code>continue</code> statement is used when you want to go back to the beginning of the <code>while</code> loop.</p>

<p>The <code>break</code> statement is used when you want to leave the <code>while</code> loop all together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">we_want_to_start_the_loop_over</span> <span class="o">==</span> <span class="bp">True</span><span class="p">):</span>
</span><span class='line'>      <span class="k">continue</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">we_want_to_end_the_loop</span> <span class="o">==</span> <span class="bp">True</span><span class="p">):</span>
</span><span class='line'>      <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The For Loop</h2>

<p>Another way to do a loop is using a <code>for</code> statement.</p>

<h3>Using Range</h3>

<p>Here is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>  <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="o">+</span><span class="n">num</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will loop through 10 times because of the <code>range(10)</code> method and print out the value <strong>45</strong>.</p>

<p>The <code>range()</code> method allows 3 arguments to be passed to it. Here are 3 ways to use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>       <span class="c"># will go from 0 to 10 counting by ones</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>    <span class="c"># will go from 5 to 10 counting by ones</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span> <span class="c"># will go from 5 to 1 counting backwards 1 at a time</span>
</span></code></pre></td></tr></table></div></figure>


<h3>For Each Item in a List</h3>

<p>If you want to do something with the values of a list, you can cycle through it like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">grades</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;F&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">grade</span> <span class="ow">in</span> <span class="n">grades</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="n">grade</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Enumerate</h3>

<p>If you want to iterate through a list and make edits to the list you can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">grades</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;F&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">grades</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="s">&#39;F&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">grades</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;A&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This changes all your F grades to As!</p>

<h3>Looping Through all Keys</h3>

<p>If using a dictionary, you can loop through all keys this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">inventory</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;apples&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s">&#39;peaches&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="n">fruit</span> <span class="ow">in</span> <span class="n">inventory</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;We have &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">inventory</span><span class="p">[</span><span class="n">fruit</span><span class="p">])</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">fruit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Regular Expressions in Python]]></title>
    <link href="https://www.tunnelsup.com/using-regular-expressions-in-python/"/>
    <updated>2016-09-14T21:44:00-07:00</updated>
    <id>https://www.tunnelsup.com/using-regular-expressions-in-python</id>
    <content type="html"><![CDATA[<p>If you need to do pattern matching on a string within Python, using a regular expression will be the best way to do it. Here are some basic examples to help you with this.</p>

<h2>Import Library</h2>

<p>To use any of the regular expressions you&rsquo;ll need to add this library:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>import re</span></code></pre></td></tr></table></div></figure>


<h2>Regex Compiler</h2>

<p>Create the regex object using the <code>compile()</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">phone_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates or defines the regex object which we can then use against a string.</p>

<p>The <code>r</code> here indicates a raw string.</p>

<p>I recommend building and testing your regex with a tool like <a href="http://regexpal.com.">http://regexpal.com.</a></p>

<h2>Matching Regex Objects</h2>

<p>Once the regex object is defined you can use the <code>search()</code> method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">phone_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">search_results</span> <span class="o">=</span> <span class="n">phone_regex</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;My number is 310-429-4019.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The results of this are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Results: &#39;</span> <span class="o">+</span> <span class="n">search_results</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>
</span><span class='line'><span class="n">Results</span><span class="p">:</span> <span class="mi">310</span><span class="o">-</span><span class="mi">429</span><span class="o">-</span><span class="mi">4019</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>search()</code> method will return the <strong>first</strong> match it finds in the string.</p>

<p>The results are stored in the <code>group()</code> method of your variable.</p>

<h2>Using Parenthesis to Form Groups</h2>

<p>If you need to match on a larger string but want to only extract a portion of the string, you can use parenthesis to make more groups.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">phone_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;(\d\d\d)-(\d\d\d-\d\d\d\d)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">search_results</span> <span class="o">=</span> <span class="n">phone_regex</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;Call me at 310-429-4019.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has created 4 groups shown here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Results: &#39;</span> <span class="o">+</span> <span class="n">search_results</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>
</span><span class='line'><span class="n">Results</span><span class="p">:</span> <span class="mi">310</span><span class="o">-</span><span class="mi">429</span><span class="o">-</span><span class="mi">4019</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Results: &#39;</span> <span class="o">+</span> <span class="n">search_results</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="n">Results</span><span class="p">:</span> <span class="mi">310</span><span class="o">-</span><span class="mi">429</span><span class="o">-</span><span class="mi">4019</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Results: &#39;</span> <span class="o">+</span> <span class="n">search_results</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">Results</span><span class="p">:</span> <span class="mi">310</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Results: &#39;</span> <span class="o">+</span> <span class="n">search_results</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="n">Results</span><span class="p">:</span> <span class="mi">429</span><span class="o">-</span><span class="mi">4019</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Without Regex Compile</h2>

<p>An alternative way to do this is to skip the regex <code>compile()</code> method and use this syntax instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_string</span> <span class="o">=</span> <span class="s">&quot;Name: Fred, Occupation: Bronto Crane Operator&quot;</span>
</span><span class='line'><span class="n">parse_data</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;Name: (\w*), Occupation: (.*)&#39;</span><span class="p">,</span> <span class="n">my_string</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">parse_data</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>
</span><span class='line'><span class="n">Name</span><span class="p">:</span> <span class="n">Fred</span><span class="p">,</span> <span class="n">Occupation</span><span class="p">:</span> <span class="n">Bronto</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">parse_data</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">Fred</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">parse_data</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="n">Bronto</span> <span class="n">Crane</span> <span class="n">Operator</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ignore Case</h2>

<p>Use the <code>re.IGNORECASE</code> option to ignore capitalization. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">fred_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;fred&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'><span class="n">search_results</span> <span class="o">=</span> <span class="n">fred_regex</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;His name is Fred.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This produces the following results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">search_results</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>
</span><span class='line'><span class="n">Fred</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pro Tip: You can use the shortcut <code>re.I</code> instead of <code>re.IGNORECASE</code>.</p>

<h2>Using findall()</h2>

<p>While the <code>search()</code> method finds the first occurrence, the <code>findall()</code> method returns every occurrence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">phone_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">search_results</span> <span class="o">=</span> <span class="n">phone_regex</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;You can call me at 310-429-4019 or 310-777-4777.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This turns the <code>search_results</code> variable into a list and has the following results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">search_results</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;310-429-4019&#39;</span><span class="p">,</span> <span class="s">&#39;310-777-4777&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">search_results</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="mi">310</span><span class="o">-</span><span class="mi">429</span><span class="o">-</span><span class="mi">4019</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">search_results</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">310</span><span class="o">-</span><span class="mi">777</span><span class="o">-</span><span class="mi">4777</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Substituting Using a Regex</h2>

<p>You can use the <code>sub()</code> method to substitute a string matching a regex. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">phone_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">scrubbed_phone_numbers</span> <span class="o">=</span> <span class="n">phone_regex</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;XXX-XXX-XXXX&#39;</span><span class="p">,</span> <span class="s">&#39;My number is 310-429-4019.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">scrubbed_phone_numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This prints <code>My number is XXX-XXX-XXXX.</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Zero: Blink an LED using GPIO pins]]></title>
    <link href="https://www.tunnelsup.com/raspberry-pi-zero-blink-an-led-using-gpio-pins/"/>
    <updated>2016-09-14T12:19:00-07:00</updated>
    <id>https://www.tunnelsup.com/raspberry-pi-zero-blink-an-led-using-gpio-pins</id>
    <content type="html"><![CDATA[<p>Want to use the GPIO pins to blink an LED using a Raspberry Pi Zero? Here&rsquo;s a quick guide to get you started.</p>

<h2>Build the circuit</h2>

<p>Do this is the Raspberry Pi off. You don&rsquo;t want to accidentally touch the wrong pin on the Pi and fry the Pi.</p>

<p>Use <a href="http://pinout.xyz">http://pinout.xyz</a> to check the pinouts of the Raspberry Pi.</p>

<p>Create a circuit that goes from GND to LED to resistor to GPIO pin (BCM).</p>

<p><img src="https://www.raspberrypi.org/wp-content/uploads/2015/11/led-gpio17.png" width="500"></p>

<h2>Install the Python Library</h2>

<p>We&rsquo;ll be using python to build our program so first download the python library. There is an api to interface with the GPIO pins which makes this a lot easier.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python3-gpiozero python-gpiozero</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gpiozero.readthedocs.io/">https://gpiozero.readthedocs.io/</a> for more information on this library.</p>

<h2>Create the Program</h2>

<p>Now create a file called <code>blink.py</code> and put the following in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">gpiozero</span> <span class="kn">import</span> <span class="n">LED</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'>
</span><span class='line'><span class="n">led</span> <span class="o">=</span> <span class="n">LED</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span> <span class="c"># Choose the correct pin number</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">led</span><span class="o">.</span><span class="n">on</span><span class="p">()</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">led</span><span class="o">.</span><span class="n">off</span><span class="p">()</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Run the Program</h2>

<p>Run the program with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">blink</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>If all went well you should now see your LED blinking!</p>

<h2>References</h2>

<p><a href="https://gpiozero.readthedocs.io/">https://gpiozero.readthedocs.io/</a></p>

<p><a href="https://www.raspberrypi.org/blog/gpio-zero-a-friendly-python-api-for-physical-computing/">https://www.raspberrypi.org/blog/gpio-zero-a-friendly-python-api-for-physical-computing/</a></p>

<p><a href="http://pinout.xyz">http://pinout.xyz</a></p>

<p><a href="https://hackr.io/tutorials/python">https://hackr.io/tutorials/python</a></p>
]]></content>
  </entry>
  
</feed>
